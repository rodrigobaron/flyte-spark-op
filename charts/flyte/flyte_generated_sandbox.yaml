---
# Source: flyte/charts/contour/templates/contour/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flyte-contour-contour
  namespace: flyte
  labels:
    app.kubernetes.io/name: contour
    helm.sh/chart: contour-5.0.0
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: contour
---
# Source: flyte/charts/contour/templates/envoy/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flyte-contour-envoy
  namespace: flyte
  labels:
    app.kubernetes.io/name: contour
    helm.sh/chart: contour-5.0.0
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: envoy
---
# Source: flyte/charts/flyte/templates/admin/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flyteadmin
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-v0.1.10
    app.kubernetes.io/managed-by: Helm
---
# Source: flyte/charts/flyte/templates/datacatalog/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: datacatalog
  namespace: flyte
  labels: 
    app.kubernetes.io/name: datacatalog
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-v0.1.10
    app.kubernetes.io/managed-by: Helm
---
# Source: flyte/charts/flyte/templates/flytescheduler/sa.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flytescheduler
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flytescheduler
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-v0.1.10
    app.kubernetes.io/managed-by: Helm
---
# Source: flyte/charts/flyte/templates/propeller/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flytepropeller
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flytepropeller
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-v0.1.10
    app.kubernetes.io/managed-by: Helm
---
# Source: flyte/charts/flyte/templates/propeller/webhook.yaml
# Create a Service Account for webhook
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flyte-pod-webhook
  namespace: flyte
---
# Source: flyte/charts/kubernetes-dashboard/templates/serviceaccount.yaml
# Copyright 2017 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: kubernetes-dashboard
    helm.sh/chart: kubernetes-dashboard-4.0.2
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/version: "2.2.0"
    app.kubernetes.io/managed-by: Helm
  name: flyte-kubernetes-dashboard
---
# Source: flyte/charts/sparkoperator/templates/spark-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flyte-spark
  namespace: flyte
  labels:
    helm.sh/chart: sparkoperator-1.1.17
    app.kubernetes.io/name: sparkoperator
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/version: "v1beta2-1.3.3-3.1.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: flyte/charts/flyte/templates/admin/secret-auth.yaml
apiVersion: v1
kind: Secret
metadata:
  name: flyte-admin-secrets
  namespace: flyte
type: Opaque
stringData:
---
# Source: flyte/charts/flyte/templates/common/secret-auth.yaml
apiVersion: v1
kind: Secret
metadata:
  name: flyte-secret-auth
  namespace: flyte
type: Opaque
stringData:
  client_secret: foobar
---
# Source: flyte/charts/flyte/templates/propeller/webhook.yaml
# Create an empty secret that the first propeller pod will populate
apiVersion: v1
kind: Secret
metadata:
  name: flyte-pod-webhook
  namespace: flyte
type: Opaque
---
# Source: flyte/charts/kubernetes-dashboard/templates/secret.yaml
# Copyright 2017 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# kubernetes-dashboard-certs
apiVersion: v1
kind: Secret
metadata:
  labels:
    app.kubernetes.io/name: kubernetes-dashboard
    helm.sh/chart: kubernetes-dashboard-4.0.2
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/version: "2.2.0"
    app.kubernetes.io/managed-by: Helm
  name: flyte-kubernetes-dashboard-certs
type: Opaque
---
# Source: flyte/charts/kubernetes-dashboard/templates/secret.yaml
# kubernetes-dashboard-csrf
apiVersion: v1
kind: Secret
metadata:
  labels:
    app.kubernetes.io/name: kubernetes-dashboard
    helm.sh/chart: kubernetes-dashboard-4.0.2
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/version: "2.2.0"
    app.kubernetes.io/managed-by: Helm
  name: kubernetes-dashboard-csrf
type: Opaque
---
# Source: flyte/charts/kubernetes-dashboard/templates/secret.yaml
# kubernetes-dashboard-key-holder
apiVersion: v1
kind: Secret
metadata:
  labels:
    app.kubernetes.io/name: kubernetes-dashboard
    helm.sh/chart: kubernetes-dashboard-4.0.2
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/version: "2.2.0"
    app.kubernetes.io/managed-by: Helm
  name: kubernetes-dashboard-key-holder
type: Opaque
---
# Source: flyte/charts/contour/templates/contour/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: flyte-contour
  namespace: flyte
  labels:
    app.kubernetes.io/name: contour
    helm.sh/chart: contour-5.0.0
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: contour
data:
  contour.yaml: |
    accesslog-format: envoy
    disablePermitInsecure: false
    envoy-service-name: 'flyte-contour-envoy'
    leaderelection:
      configmap-namespace: 'flyte'
    tls: {}
---
# Source: flyte/charts/flyte/templates/admin/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: flyte-admin-config
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-v0.1.10
    app.kubernetes.io/managed-by: Helm
data:
  db.yaml: | 
    database:
      dbname: flyteadmin
      host: postgres
      port: 5432
      username: postgres
  domain.yaml: | 
    domains:
    - id: development
      name: development
    - id: staging
      name: staging
    - id: production
      name: production
  logger.yaml: | 
    logger:
      level: 4
      show-source: true
  server.yaml: | 
    auth:
      appAuth:
        thirdPartyConfig:
          flyteClient:
            clientId: flytectl
            redirectUri: http://localhost:53593/callback
            scopes:
            - offline
            - all
      authorizedUris:
      - https://localhost:30081
      - http://flyteadmin:80
      - http://flyteadmin.flyte.svc.cluster.local:80
      userAuth:
        openId:
          baseUrl: https://accounts.google.com
          clientId: 657465813211-6eog7ek7li5k7i7fvgv2921075063hpe.apps.googleusercontent.com
          scopes:
          - profile
          - openid
    flyteadmin:
      eventVersion: 2
      metadataStoragePrefix:
      - metadata
      - admin
      metricsScope: 'flyte:'
      profilerPort: 10254
      roleNameKey: iam.amazonaws.com/role
      testing:
        host: http://flyteadmin
    server:
      grpcPort: 8089
      httpPort: 8088
      security:
        allowCors: true
        allowedHeaders:
        - Content-Type
        - flyte-authorization
        allowedOrigins:
        - '*'
        secure: false
        useAuth: false
  remoteData.yaml: | 
    remoteData:
      region: us-east-1
      scheme: local
      signedUrls:
        durationMinutes: 3
  storage.yaml: | 
    storage:
      type: minio
      container: "my-s3-bucket"
      connection:
        access-key: minio
        auth-type: accesskey
        secret-key: miniostorage
        disable-ssl: true
        endpoint: http://minio.flyte.svc.cluster.local:9000
        region: us-east-1
      limits:
        maxDownloadMBs: 10
  task_resource_defaults.yaml: | 
    task_resources:
      defaults:
        cpu: 100m
        memory: 200Mi
        storage: 5Mi
      limits:
        cpu: 2
        gpu: 1
        memory: 1Gi
        storage: 20Mi
  cluster_resources.yaml: | 
    cluster_resources:
      customData:
      - production:
        - projectQuotaCpu:
            value: "5"
        - projectQuotaMemory:
            value: 4000Mi
      - staging:
        - projectQuotaCpu:
            value: "2"
        - projectQuotaMemory:
            value: 3000Mi
      - development:
        - projectQuotaCpu:
            value: "4"
        - projectQuotaMemory:
            value: 3000Mi
      refresh: 5m
      refreshInterval: 5m
      standaloneDeployment: false
      templatePath: /etc/flyte/clusterresource/templates
---
# Source: flyte/charts/flyte/templates/clusterresourcesync/cluster_resource_configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: clusterresource-template
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-v0.1.10
    app.kubernetes.io/managed-by: Helm
data:
  aa_namespace.yaml: | 
    apiVersion: v1
    kind: Namespace
    metadata:
      name: {{ namespace }}
    spec:
      finalizers:
      - kubernetes
    
  ab_project_resource_quota.yaml: | 
    apiVersion: v1
    kind: ResourceQuota
    metadata:
      name: project-quota
      namespace: {{ namespace }}
    spec:
      hard:
        limits.cpu: {{ projectQuotaCpu }}
        limits.memory: {{ projectQuotaMemory }}
    
  ad_spark-role.yaml: | 
    apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      name: spark-role
      namespace: {{ namespace }}
    rules:
    - apiGroups:
      - ""
      resources:
      - pods
      verbs:
      - '*'
    - apiGroups:
      - ""
      resources:
      - services
      verbs:
      - '*'
    - apiGroups:
      - ""
      resources:
      - configmaps
      verbs:
      - '*'
    
  ae_spark-service-account.yaml: | 
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: spark
      namespace: {{ namespace }}
    
  af_spark-role-binding.yaml: | 
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: spark-role-binding
      namespace: {{ namespace }}
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: Role
      name: spark-role
    subjects:
    - kind: ServiceAccount
      name: spark
      namespace: {{ namespace }}
---
# Source: flyte/charts/flyte/templates/clusterresourcesync/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: flyte-clusterresourcesync-config
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-v0.1.10
    app.kubernetes.io/managed-by: Helm
data:
  cluster_resources.yaml: | 
    cluster_resources:
      customData:
      - production:
        - projectQuotaCpu:
            value: "5"
        - projectQuotaMemory:
            value: 4000Mi
      - staging:
        - projectQuotaCpu:
            value: "2"
        - projectQuotaMemory:
            value: 3000Mi
      - development:
        - projectQuotaCpu:
            value: "4"
        - projectQuotaMemory:
            value: 3000Mi
      refresh: 5m
      refreshInterval: 5m
      standaloneDeployment: false
      templatePath: /etc/flyte/clusterresource/templates
  db.yaml: | 
    database:
      dbname: flyteadmin
      host: postgres
      port: 5432
      username: postgres
  domain.yaml: | 
    domains:
    - id: development
      name: development
    - id: staging
      name: staging
    - id: production
      name: production
---
# Source: flyte/charts/flyte/templates/console/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: flyte-console-config
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flyteconsole
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-v0.1.10
    app.kubernetes.io/managed-by: Helm
data: 
  BASE_URL: /console
  CONFIG_DIR: /etc/flyte/config
  DISABLE_AUTH: "1"
---
# Source: flyte/charts/flyte/templates/datacatalog/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: datacatalog-config
  namespace: flyte
  labels: 
    app.kubernetes.io/name: datacatalog
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-v0.1.10
    app.kubernetes.io/managed-by: Helm
data:
  db.yaml: | 
    database:
      dbname: datacatalog
      host: postgres
      port: 5432
      username: postgres
  logger.yaml: | 
    logger:
      level: 4
      show-source: true
  server.yaml: | 
    application:
      grpcPort: 8089
      grpcServerReflection: true
      httpPort: 8080
    datacatalog:
      heartbeat-grace-period-multiplier: 3
      max-reservation-heartbeat: 30s
      metrics-scope: datacatalog
      profiler-port: 10254
      storage-prefix: metadata/datacatalog
  storage.yaml: | 
    storage:
      type: minio
      container: "my-s3-bucket"
      connection:
        access-key: minio
        auth-type: accesskey
        secret-key: miniostorage
        disable-ssl: true
        endpoint: http://minio.flyte.svc.cluster.local:9000
        region: us-east-1
      limits:
        maxDownloadMBs: 10
---
# Source: flyte/charts/flyte/templates/flytescheduler/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: flyte-scheduler-config
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flytescheduler
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-v0.1.10
    app.kubernetes.io/managed-by: Helm
data:
  admin.yaml: | 
    admin:
      clientId: 'flytepropeller'
      clientSecretLocation: /etc/secrets/client_secret
      endpoint: flyteadmin:81
      insecure: true
    event:
      capacity: 1000
      rate: 500
      type: admin
  db.yaml: | 
    database:
      dbname: flyteadmin
      host: postgres
      port: 5432
      username: postgres
  server.yaml: | 
    scheduler:
      metricsScope: 'flyte:'
      profilerPort: 10254
  logger.yaml: | 
    logger:
      level: 4
      show-source: true
---
# Source: flyte/charts/flyte/templates/propeller/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: flyte-propeller-config
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-v0.1.10
    app.kubernetes.io/managed-by: Helm
data:
  admin.yaml: | 
    admin:
      clientId: 'flytepropeller'
      clientSecretLocation: /etc/secrets/client_secret
      endpoint: flyteadmin:81
      insecure: true
    event:
      capacity: 1000
      rate: 500
      type: admin
  catalog.yaml: | 
    catalog-cache:
      endpoint: datacatalog:89
      insecure: true
      type: datacatalog
  copilot.yaml: | 
    plugins:
      k8s:
        co-pilot:
          image: cr.flyte.org/flyteorg/flytecopilot:v0.0.24
          name: flyte-copilot-
          start-timeout: 30s
  core.yaml: | 
    manager:
      pod-application: flytepropeller
      pod-template-container-name: flytepropeller
      pod-template-name: flytepropeller-template
    propeller:
      downstream-eval-duration: 30s
      enable-admin-launcher: true
      leader-election:
        enabled: true
        lease-duration: 15s
        lock-config-map:
          name: propeller-leader
          namespace: flyte
        renew-deadline: 10s
        retry-period: 2s
      limit-namespace: all
      max-workflow-retries: 30
      metadata-prefix: metadata/propeller
      metrics-prefix: flyte
      prof-port: 10254
      queue:
        batch-size: -1
        batching-interval: 2s
        queue:
          base-delay: 5s
          capacity: 1000
          max-delay: 120s
          rate: 100
          type: maxof
        sub-queue:
          capacity: 100
          rate: 10
          type: bucket
        type: batch
      rawoutput-prefix: s3://my-s3-bucket/
      workers: 4
      workflow-reeval-duration: 30s
    webhook:
      certDir: /etc/webhook/certs
      serviceName: flyte-pod-webhook
  enabled_plugins.yaml: | 
    tasks:
      task-plugins:
        default-for-task-types:
          container: container
          container_array: k8s-array
          sidecar: sidecar
          spark: spark
        enabled-plugins:
        - container
        - sidecar
        - k8s-array
        - spark
  k8s.yaml: | 
    plugins:
      k8s:
        default-cpus: 100m
        default-env-vars:
        - FLYTE_AWS_ENDPOINT: http://192.168.0.222:30084
        - FLYTE_AWS_ACCESS_KEY_ID: minio
        - FLYTE_AWS_SECRET_ACCESS_KEY: miniostorage
        default-memory: 200Mi
  logger.yaml: | 
    logger:
      level: 4
      show-source: true
  resource_manager.yaml: | 
    propeller:
      resourcemanager:
        type: noop
  storage.yaml: | 
    storage:
      type: minio
      container: "my-s3-bucket"
      connection:
        access-key: minio
        auth-type: accesskey
        secret-key: miniostorage
        disable-ssl: true
        endpoint: http://minio.flyte.svc.cluster.local:9000
        region: us-east-1
      limits:
        maxDownloadMBs: 10
  cache.yaml: |
    cache:
      max_size_mbs: 0
      target_gc_percent: 70
  task_logs.yaml: | 
    plugins:
      logs:
        cloudwatch-enabled: false
        kubernetes-enabled: true
        kubernetes-template-uri: http://localhost:30082/#/log/{{ .namespace }}/{{ .podName }}/pod?namespace={{ .namespace }}
---
# Source: flyte/charts/kubernetes-dashboard/templates/configmap.yaml
# Copyright 2017 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: kubernetes-dashboard
    helm.sh/chart: kubernetes-dashboard-4.0.2
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/version: "2.2.0"
    app.kubernetes.io/managed-by: Helm
  name: kubernetes-dashboard-settings
data:
---
# Source: flyte/charts/contour/templates/00-crds.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.5.0
  creationTimestamp: null
  name: extensionservices.projectcontour.io
spec:
  preserveUnknownFields: false
  group: projectcontour.io
  names:
    kind: ExtensionService
    listKind: ExtensionServiceList
    plural: extensionservices
    shortNames:
    - extensionservice
    - extensionservices
    singular: extensionservice
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ExtensionService is the schema for the Contour extension services
          API. An ExtensionService resource binds a network service to the Contour
          API so that Contour API features can be implemented by collaborating components.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ExtensionServiceSpec defines the desired state of an ExtensionService
              resource.
            properties:
              loadBalancerPolicy:
                description: The policy for load balancing GRPC service requests.
                  Note that the `Cookie` and `RequestHash` load balancing strategies
                  cannot be used here.
                properties:
                  requestHashPolicies:
                    description: RequestHashPolicies contains a list of hash policies
                      to apply when the `RequestHash` load balancing strategy is chosen.
                      If an element of the supplied list of hash policies is invalid,
                      it will be ignored. If the list of hash policies is empty after
                      validation, the load balancing strategy will fall back the the
                      default `RoundRobin`.
                    items:
                      description: RequestHashPolicy contains configuration for an
                        individual hash policy on a request attribute.
                      properties:
                        headerHashOptions:
                          description: HeaderHashOptions should be set when request
                            header hash based load balancing is desired. It must be
                            the only hash option field set, otherwise this request
                            hash policy object will be ignored.
                          properties:
                            headerName:
                              description: HeaderName is the name of the HTTP request
                                header that will be used to calculate the hash key.
                                If the header specified is not present on a request,
                                no hash will be produced.
                              minLength: 1
                              type: string
                          type: object
                        terminal:
                          description: Terminal is a flag that allows for short-circuiting
                            computing of a hash for a given request. If set to true,
                            and the request attribute specified in the attribute hash
                            options is present, no further hash policies will be used
                            to calculate a hash for the request.
                          type: boolean
                      type: object
                    type: array
                  strategy:
                    description: Strategy specifies the policy used to balance requests
                      across the pool of backend pods. Valid policy names are `Random`,
                      `RoundRobin`, `WeightedLeastRequest`, `Cookie`, and `RequestHash`.
                      If an unknown strategy name is specified or no policy is supplied,
                      the default `RoundRobin` policy is used.
                    type: string
                type: object
              protocol:
                description: Protocol may be used to specify (or override) the protocol
                  used to reach this Service. Values may be h2 or h2c. If omitted,
                  protocol-selection falls back on Service annotations.
                enum:
                - h2
                - h2c
                type: string
              protocolVersion:
                description: This field sets the version of the GRPC protocol that
                  Envoy uses to send requests to the extension service. Since Contour
                  always uses the v3 Envoy API, this is currently fixed at "v3". However,
                  other protocol options will be available in future.
                enum:
                - v3
                type: string
              services:
                description: Services specifies the set of Kubernetes Service resources
                  that receive GRPC extension API requests. If no weights are specified
                  for any of the entries in this array, traffic will be spread evenly
                  across all the services. Otherwise, traffic is balanced proportionally
                  to the Weight field in each entry.
                items:
                  description: ExtensionServiceTarget defines an Kubernetes Service
                    to target with extension service traffic.
                  properties:
                    name:
                      description: Name is the name of Kubernetes service that will
                        accept service traffic.
                      type: string
                    port:
                      description: Port (defined as Integer) to proxy traffic to since
                        a service can have multiple defined.
                      exclusiveMaximum: true
                      maximum: 65536
                      minimum: 1
                      type: integer
                    weight:
                      description: Weight defines proportion of traffic to balance
                        to the Kubernetes Service.
                      format: int32
                      type: integer
                  required:
                  - name
                  - port
                  type: object
                minItems: 1
                type: array
              timeoutPolicy:
                description: The timeout policy for requests to the services.
                properties:
                  idle:
                    description: Timeout after which, if there are no active requests
                      for this route, the connection between Envoy and the backend
                      or Envoy and the external client will be closed. If not specified,
                      there is no per-route idle timeout, though a connection manager-wide
                      stream_idle_timeout default of 5m still applies.
                    pattern: ^(((\d*(\.\d*)?h)|(\d*(\.\d*)?m)|(\d*(\.\d*)?s)|(\d*(\.\d*)?ms)|(\d*(\.\d*)?us)|(\d*(\.\d*)?µs)|(\d*(\.\d*)?ns))+|infinity|infinite)$
                    type: string
                  response:
                    description: Timeout for receiving a response from the server
                      after processing a request from client. If not supplied, Envoy's
                      default value of 15s applies.
                    pattern: ^(((\d*(\.\d*)?h)|(\d*(\.\d*)?m)|(\d*(\.\d*)?s)|(\d*(\.\d*)?ms)|(\d*(\.\d*)?us)|(\d*(\.\d*)?µs)|(\d*(\.\d*)?ns))+|infinity|infinite)$
                    type: string
                type: object
              validation:
                description: UpstreamValidation defines how to verify the backend
                  service's certificate
                properties:
                  caSecret:
                    description: Name of the Kubernetes secret be used to validate
                      the certificate presented by the backend
                    type: string
                  subjectName:
                    description: Key which is expected to be present in the 'subjectAltName'
                      of the presented certificate
                    type: string
                required:
                - caSecret
                - subjectName
                type: object
            required:
            - services
            type: object
          status:
            description: ExtensionServiceStatus defines the observed state of an ExtensionService
              resource.
            properties:
              conditions:
                description: "Conditions contains the current status of the ExtensionService
                  resource. \n Contour will update a single condition, `Valid`, that
                  is in normal-true polarity. \n Contour will not modify any other
                  Conditions set in this block, in case some other controller wants
                  to add a Condition."
                items:
                  description: "DetailedCondition is an extension of the normal Kubernetes
                    conditions, with two extra fields to hold sub-conditions, which
                    provide more detailed reasons for the state (True or False) of
                    the condition. \n `errors` holds information about sub-conditions
                    which are fatal to that condition and render its state False.
                    \n `warnings` holds information about sub-conditions which are
                    not fatal to that condition and do not force the state to be False.
                    \n Remember that Conditions have a type, a status, and a reason.
                    \n The type is the type of the condition, the most important one
                    in this CRD set is `Valid`. `Valid` is a positive-polarity condition:
                    when it is `status: true` there are no problems. \n In more detail,
                    `status: true` means that the object is has been ingested into
                    Contour with no errors. `warnings` may still be present, and will
                    be indicated in the Reason field. There must be zero entries in
                    the `errors` slice in this case. \n `Valid`, `status: false` means
                    that the object has had one or more fatal errors during processing
                    into Contour.  The details of the errors will be present under
                    the `errors` field. There must be at least one error in the `errors`
                    slice if `status` is `false`. \n For DetailedConditions of types
                    other than `Valid`, the Condition must be in the negative polarity.
                    When they have `status` `true`, there is an error. There must
                    be at least one entry in the `errors` Subcondition slice. When
                    they have `status` `false`, there are no serious errors, and there
                    must be zero entries in the `errors` slice. In either case, there
                    may be entries in the `warnings` slice. \n Regardless of the polarity,
                    the `reason` and `message` fields must be updated with either
                    the detail of the reason (if there is one and only one entry in
                    total across both the `errors` and `warnings` slices), or `MultipleReasons`
                    if there is more than one entry."
                  properties:
                    errors:
                      description: "Errors contains a slice of relevant error subconditions
                        for this object. \n Subconditions are expected to appear when
                        relevant (when there is a error), and disappear when not relevant.
                        An empty slice here indicates no errors."
                      items:
                        description: "SubCondition is a Condition-like type intended
                          for use as a subcondition inside a DetailedCondition. \n
                          It contains a subset of the Condition fields. \n It is intended
                          for warnings and errors, so `type` names should use abnormal-true
                          polarity, that is, they should be of the form \"ErrorPresent:
                          true\". \n The expected lifecycle for these errors is that
                          they should only be present when the error or warning is,
                          and should be removed when they are not relevant."
                        properties:
                          message:
                            description: "Message is a human readable message indicating
                              details about the transition. \n This may be an empty
                              string."
                            maxLength: 32768
                            type: string
                          reason:
                            description: "Reason contains a programmatic identifier
                              indicating the reason for the condition's last transition.
                              Producers of specific condition types may define expected
                              values and meanings for this field, and whether the
                              values are considered a guaranteed API. \n The value
                              should be a CamelCase string. \n This field may not
                              be empty."
                            maxLength: 1024
                            minLength: 1
                            pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                            type: string
                          status:
                            description: Status of the condition, one of True, False,
                              Unknown.
                            enum:
                            - "True"
                            - "False"
                            - Unknown
                            type: string
                          type:
                            description: "Type of condition in `CamelCase` or in `foo.example.com/CamelCase`.
                              \n This must be in abnormal-true polarity, that is,
                              `ErrorFound` or `controller.io/ErrorFound`. \n The regex
                              it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)"
                            maxLength: 316
                            pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                            type: string
                        required:
                        - message
                        - reason
                        - status
                        - type
                        type: object
                      type: array
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                    warnings:
                      description: "Warnings contains a slice of relevant warning
                        subconditions for this object. \n Subconditions are expected
                        to appear when relevant (when there is a warning), and disappear
                        when not relevant. An empty slice here indicates no warnings."
                      items:
                        description: "SubCondition is a Condition-like type intended
                          for use as a subcondition inside a DetailedCondition. \n
                          It contains a subset of the Condition fields. \n It is intended
                          for warnings and errors, so `type` names should use abnormal-true
                          polarity, that is, they should be of the form \"ErrorPresent:
                          true\". \n The expected lifecycle for these errors is that
                          they should only be present when the error or warning is,
                          and should be removed when they are not relevant."
                        properties:
                          message:
                            description: "Message is a human readable message indicating
                              details about the transition. \n This may be an empty
                              string."
                            maxLength: 32768
                            type: string
                          reason:
                            description: "Reason contains a programmatic identifier
                              indicating the reason for the condition's last transition.
                              Producers of specific condition types may define expected
                              values and meanings for this field, and whether the
                              values are considered a guaranteed API. \n The value
                              should be a CamelCase string. \n This field may not
                              be empty."
                            maxLength: 1024
                            minLength: 1
                            pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                            type: string
                          status:
                            description: Status of the condition, one of True, False,
                              Unknown.
                            enum:
                            - "True"
                            - "False"
                            - Unknown
                            type: string
                          type:
                            description: "Type of condition in `CamelCase` or in `foo.example.com/CamelCase`.
                              \n This must be in abnormal-true polarity, that is,
                              `ErrorFound` or `controller.io/ErrorFound`. \n The regex
                              it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)"
                            maxLength: 316
                            pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                            type: string
                        required:
                        - message
                        - reason
                        - status
                        - type
                        type: object
                      type: array
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: flyte/charts/contour/templates/00-crds.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.5.0
  creationTimestamp: null
  name: httpproxies.projectcontour.io
spec:
  preserveUnknownFields: false
  group: projectcontour.io
  names:
    kind: HTTPProxy
    listKind: HTTPProxyList
    plural: httpproxies
    shortNames:
    - proxy
    - proxies
    singular: httpproxy
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: Fully qualified domain name
      jsonPath: .spec.virtualhost.fqdn
      name: FQDN
      type: string
    - description: Secret with TLS credentials
      jsonPath: .spec.virtualhost.tls.secretName
      name: TLS Secret
      type: string
    - description: The current status of the HTTPProxy
      jsonPath: .status.currentStatus
      name: Status
      type: string
    - description: Description of the current status
      jsonPath: .status.description
      name: Status Description
      type: string
    name: v1
    schema:
      openAPIV3Schema:
        description: HTTPProxy is an Ingress CRD specification.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: HTTPProxySpec defines the spec of the CRD.
            properties:
              includes:
                description: Includes allow for specific routing configuration to
                  be included from another HTTPProxy, possibly in another namespace.
                items:
                  description: Include describes a set of policies that can be applied
                    to an HTTPProxy in a namespace.
                  properties:
                    conditions:
                      description: 'Conditions are a set of rules that are applied
                        to included HTTPProxies. In effect, they are added onto the
                        Conditions of included HTTPProxy Route structs. When applied,
                        they are merged using AND, with one exception: There can be
                        only one Prefix MatchCondition per Conditions slice. More
                        than one Prefix, or contradictory Conditions, will make the
                        include invalid.'
                      items:
                        description: MatchCondition are a general holder for matching
                          rules for HTTPProxies. One of Prefix or Header must be provided.
                        properties:
                          header:
                            description: Header specifies the header condition to
                              match.
                            properties:
                              contains:
                                description: Contains specifies a substring that must
                                  be present in the header value.
                                type: string
                              exact:
                                description: Exact specifies a string that the header
                                  value must be equal to.
                                type: string
                              name:
                                description: Name is the name of the header to match
                                  against. Name is required. Header names are case
                                  insensitive.
                                type: string
                              notcontains:
                                description: NotContains specifies a substring that
                                  must not be present in the header value.
                                type: string
                              notexact:
                                description: NoExact specifies a string that the header
                                  value must not be equal to. The condition is true
                                  if the header has any other value.
                                type: string
                              notpresent:
                                description: NotPresent specifies that condition is
                                  true when the named header is not present. Note
                                  that setting NotPresent to false does not make the
                                  condition true if the named header is present.
                                type: boolean
                              present:
                                description: Present specifies that condition is true
                                  when the named header is present, regardless of
                                  its value. Note that setting Present to false does
                                  not make the condition true if the named header
                                  is absent.
                                type: boolean
                            required:
                            - name
                            type: object
                          prefix:
                            description: Prefix defines a prefix match for a request.
                            type: string
                        type: object
                      type: array
                    name:
                      description: Name of the HTTPProxy
                      type: string
                    namespace:
                      description: Namespace of the HTTPProxy to include. Defaults
                        to the current namespace if not supplied.
                      type: string
                  required:
                  - name
                  type: object
                type: array
              routes:
                description: Routes are the ingress routes. If TCPProxy is present,
                  Routes is ignored.
                items:
                  description: Route contains the set of routes for a virtual host.
                  properties:
                    authPolicy:
                      description: AuthPolicy updates the authorization policy that
                        was set on the root HTTPProxy object for client requests that
                        match this route.
                      properties:
                        context:
                          additionalProperties:
                            type: string
                          description: Context is a set of key/value pairs that are
                            sent to the authentication server in the check request.
                            If a context is provided at an enclosing scope, the entries
                            are merged such that the inner scope overrides matching
                            keys from the outer scope.
                          type: object
                        disabled:
                          description: When true, this field disables client request
                            authentication for the scope of the policy.
                          type: boolean
                      type: object
                    conditions:
                      description: 'Conditions are a set of rules that are applied
                        to a Route. When applied, they are merged using AND, with
                        one exception: There can be only one Prefix MatchCondition
                        per Conditions slice. More than one Prefix, or contradictory
                        Conditions, will make the route invalid.'
                      items:
                        description: MatchCondition are a general holder for matching
                          rules for HTTPProxies. One of Prefix or Header must be provided.
                        properties:
                          header:
                            description: Header specifies the header condition to
                              match.
                            properties:
                              contains:
                                description: Contains specifies a substring that must
                                  be present in the header value.
                                type: string
                              exact:
                                description: Exact specifies a string that the header
                                  value must be equal to.
                                type: string
                              name:
                                description: Name is the name of the header to match
                                  against. Name is required. Header names are case
                                  insensitive.
                                type: string
                              notcontains:
                                description: NotContains specifies a substring that
                                  must not be present in the header value.
                                type: string
                              notexact:
                                description: NoExact specifies a string that the header
                                  value must not be equal to. The condition is true
                                  if the header has any other value.
                                type: string
                              notpresent:
                                description: NotPresent specifies that condition is
                                  true when the named header is not present. Note
                                  that setting NotPresent to false does not make the
                                  condition true if the named header is present.
                                type: boolean
                              present:
                                description: Present specifies that condition is true
                                  when the named header is present, regardless of
                                  its value. Note that setting Present to false does
                                  not make the condition true if the named header
                                  is absent.
                                type: boolean
                            required:
                            - name
                            type: object
                          prefix:
                            description: Prefix defines a prefix match for a request.
                            type: string
                        type: object
                      type: array
                    enableWebsockets:
                      description: Enables websocket support for the route.
                      type: boolean
                    healthCheckPolicy:
                      description: The health check policy for this route.
                      properties:
                        healthyThresholdCount:
                          description: The number of healthy health checks required
                            before a host is marked healthy
                          format: int64
                          minimum: 0
                          type: integer
                        host:
                          description: The value of the host header in the HTTP health
                            check request. If left empty (default value), the name
                            "contour-envoy-healthcheck" will be used.
                          type: string
                        intervalSeconds:
                          description: The interval (seconds) between health checks
                          format: int64
                          type: integer
                        path:
                          description: HTTP endpoint used to perform health checks
                            on upstream service
                          type: string
                        timeoutSeconds:
                          description: The time to wait (seconds) for a health check
                            response
                          format: int64
                          type: integer
                        unhealthyThresholdCount:
                          description: The number of unhealthy health checks required
                            before a host is marked unhealthy
                          format: int64
                          minimum: 0
                          type: integer
                      required:
                      - path
                      type: object
                    loadBalancerPolicy:
                      description: The load balancing policy for this route.
                      properties:
                        requestHashPolicies:
                          description: RequestHashPolicies contains a list of hash
                            policies to apply when the `RequestHash` load balancing
                            strategy is chosen. If an element of the supplied list
                            of hash policies is invalid, it will be ignored. If the
                            list of hash policies is empty after validation, the load
                            balancing strategy will fall back the the default `RoundRobin`.
                          items:
                            description: RequestHashPolicy contains configuration
                              for an individual hash policy on a request attribute.
                            properties:
                              headerHashOptions:
                                description: HeaderHashOptions should be set when
                                  request header hash based load balancing is desired.
                                  It must be the only hash option field set, otherwise
                                  this request hash policy object will be ignored.
                                properties:
                                  headerName:
                                    description: HeaderName is the name of the HTTP
                                      request header that will be used to calculate
                                      the hash key. If the header specified is not
                                      present on a request, no hash will be produced.
                                    minLength: 1
                                    type: string
                                type: object
                              terminal:
                                description: Terminal is a flag that allows for short-circuiting
                                  computing of a hash for a given request. If set
                                  to true, and the request attribute specified in
                                  the attribute hash options is present, no further
                                  hash policies will be used to calculate a hash for
                                  the request.
                                type: boolean
                            type: object
                          type: array
                        strategy:
                          description: Strategy specifies the policy used to balance
                            requests across the pool of backend pods. Valid policy
                            names are `Random`, `RoundRobin`, `WeightedLeastRequest`,
                            `Cookie`, and `RequestHash`. If an unknown strategy name
                            is specified or no policy is supplied, the default `RoundRobin`
                            policy is used.
                          type: string
                      type: object
                    pathRewritePolicy:
                      description: The policy for rewriting the path of the request
                        URL after the request has been routed to a Service.
                      properties:
                        replacePrefix:
                          description: ReplacePrefix describes how the path prefix
                            should be replaced.
                          items:
                            description: ReplacePrefix describes a path prefix replacement.
                            properties:
                              prefix:
                                description: "Prefix specifies the URL path prefix
                                  to be replaced. \n If Prefix is specified, it must
                                  exactly match the MatchCondition prefix that is
                                  rendered by the chain of including HTTPProxies and
                                  only that path prefix will be replaced by Replacement.
                                  This allows HTTPProxies that are included through
                                  multiple roots to only replace specific path prefixes,
                                  leaving others unmodified. \n If Prefix is not specified,
                                  all routing prefixes rendered by the include chain
                                  will be replaced."
                                minLength: 1
                                type: string
                              replacement:
                                description: Replacement is the string that the routing
                                  path prefix will be replaced with. This must not
                                  be empty.
                                minLength: 1
                                type: string
                            required:
                            - replacement
                            type: object
                          type: array
                      type: object
                    permitInsecure:
                      description: Allow this path to respond to insecure requests
                        over HTTP which are normally not permitted when a `virtualhost.tls`
                        block is present.
                      type: boolean
                    rateLimitPolicy:
                      description: The policy for rate limiting on the route.
                      properties:
                        global:
                          description: Global defines global rate limiting parameters,
                            i.e. parameters defining descriptors that are sent to
                            an external rate limit service (RLS) for a rate limit
                            decision on each request.
                          properties:
                            descriptors:
                              description: Descriptors defines the list of descriptors
                                that will be generated and sent to the rate limit
                                service. Each descriptor contains 1+ key-value pair
                                entries.
                              items:
                                description: RateLimitDescriptor defines a list of
                                  key-value pair generators.
                                properties:
                                  entries:
                                    description: Entries is the list of key-value
                                      pair generators.
                                    items:
                                      description: RateLimitDescriptorEntry is a key-value
                                        pair generator. Exactly one field on this
                                        struct must be non-nil.
                                      properties:
                                        genericKey:
                                          description: GenericKey defines a descriptor
                                            entry with a static key and value.
                                          properties:
                                            key:
                                              description: Key defines the key of
                                                the descriptor entry. If not set,
                                                the key is set to "generic_key".
                                              type: string
                                            value:
                                              description: Value defines the value
                                                of the descriptor entry.
                                              minLength: 1
                                              type: string
                                          type: object
                                        remoteAddress:
                                          description: RemoteAddress defines a descriptor
                                            entry with a key of "remote_address" and
                                            a value equal to the client's IP address
                                            (from x-forwarded-for).
                                          type: object
                                        requestHeader:
                                          description: RequestHeader defines a descriptor
                                            entry that's populated only if a given
                                            header is present on the request. The
                                            descriptor key is static, and the descriptor
                                            value is equal to the value of the header.
                                          properties:
                                            descriptorKey:
                                              description: DescriptorKey defines the
                                                key to use on the descriptor entry.
                                              minLength: 1
                                              type: string
                                            headerName:
                                              description: HeaderName defines the
                                                name of the header to look for on
                                                the request.
                                              minLength: 1
                                              type: string
                                          type: object
                                        requestHeaderValueMatch:
                                          description: RequestHeaderValueMatch defines
                                            a descriptor entry that's populated if
                                            the request's headers match a set of 1+
                                            match criteria. The descriptor key is
                                            "header_match", and the descriptor value
                                            is static.
                                          properties:
                                            expectMatch:
                                              default: true
                                              description: ExpectMatch defines whether
                                                the request must positively match
                                                the match criteria in order to generate
                                                a descriptor entry (i.e. true), or
                                                not match the match criteria in order
                                                to generate a descriptor entry (i.e.
                                                false). The default is true.
                                              type: boolean
                                            headers:
                                              description: Headers is a list of 1+
                                                match criteria to apply against the
                                                request to determine whether to populate
                                                the descriptor entry or not.
                                              items:
                                                description: HeaderMatchCondition
                                                  specifies how to conditionally match
                                                  against HTTP headers. The Name field
                                                  is required, but only one of the
                                                  remaining fields should be be provided.
                                                properties:
                                                  contains:
                                                    description: Contains specifies
                                                      a substring that must be present
                                                      in the header value.
                                                    type: string
                                                  exact:
                                                    description: Exact specifies a
                                                      string that the header value
                                                      must be equal to.
                                                    type: string
                                                  name:
                                                    description: Name is the name
                                                      of the header to match against.
                                                      Name is required. Header names
                                                      are case insensitive.
                                                    type: string
                                                  notcontains:
                                                    description: NotContains specifies
                                                      a substring that must not be
                                                      present in the header value.
                                                    type: string
                                                  notexact:
                                                    description: NoExact specifies
                                                      a string that the header value
                                                      must not be equal to. The condition
                                                      is true if the header has any
                                                      other value.
                                                    type: string
                                                  notpresent:
                                                    description: NotPresent specifies
                                                      that condition is true when
                                                      the named header is not present.
                                                      Note that setting NotPresent
                                                      to false does not make the condition
                                                      true if the named header is
                                                      present.
                                                    type: boolean
                                                  present:
                                                    description: Present specifies
                                                      that condition is true when
                                                      the named header is present,
                                                      regardless of its value. Note
                                                      that setting Present to false
                                                      does not make the condition
                                                      true if the named header is
                                                      absent.
                                                    type: boolean
                                                required:
                                                - name
                                                type: object
                                              minItems: 1
                                              type: array
                                            value:
                                              description: Value defines the value
                                                of the descriptor entry.
                                              minLength: 1
                                              type: string
                                          type: object
                                      type: object
                                    minItems: 1
                                    type: array
                                type: object
                              minItems: 1
                              type: array
                          type: object
                        local:
                          description: Local defines local rate limiting parameters,
                            i.e. parameters for rate limiting that occurs within each
                            Envoy pod as requests are handled.
                          properties:
                            burst:
                              description: Burst defines the number of requests above
                                the requests per unit that should be allowed within
                                a short period of time.
                              format: int32
                              type: integer
                            requests:
                              description: Requests defines how many requests per
                                unit of time should be allowed before rate limiting
                                occurs.
                              format: int32
                              minimum: 1
                              type: integer
                            responseHeadersToAdd:
                              description: ResponseHeadersToAdd is an optional list
                                of response headers to set when a request is rate-limited.
                              items:
                                description: HeaderValue represents a header name/value
                                  pair
                                properties:
                                  name:
                                    description: Name represents a key of a header
                                    minLength: 1
                                    type: string
                                  value:
                                    description: Value represents the value of a header
                                      specified by a key
                                    minLength: 1
                                    type: string
                                required:
                                - name
                                - value
                                type: object
                              type: array
                            responseStatusCode:
                              description: ResponseStatusCode is the HTTP status code
                                to use for responses to rate-limited requests. Codes
                                must be in the 400-599 range (inclusive). If not specified,
                                the Envoy default of 429 (Too Many Requests) is used.
                              format: int32
                              maximum: 599
                              minimum: 400
                              type: integer
                            unit:
                              description: Unit defines the period of time within
                                which requests over the limit will be rate limited.
                                Valid values are "second", "minute" and "hour".
                              enum:
                              - second
                              - minute
                              - hour
                              type: string
                          required:
                          - requests
                          - unit
                          type: object
                      type: object
                    requestHeadersPolicy:
                      description: The policy for managing request headers during
                        proxying.
                      properties:
                        remove:
                          description: Remove specifies a list of HTTP header names
                            to remove.
                          items:
                            type: string
                          type: array
                        set:
                          description: Set specifies a list of HTTP header values
                            that will be set in the HTTP header. If the header does
                            not exist it will be added, otherwise it will be overwritten
                            with the new value.
                          items:
                            description: HeaderValue represents a header name/value
                              pair
                            properties:
                              name:
                                description: Name represents a key of a header
                                minLength: 1
                                type: string
                              value:
                                description: Value represents the value of a header
                                  specified by a key
                                minLength: 1
                                type: string
                            required:
                            - name
                            - value
                            type: object
                          type: array
                      type: object
                    responseHeadersPolicy:
                      description: The policy for managing response headers during
                        proxying. Rewriting the 'Host' header is not supported.
                      properties:
                        remove:
                          description: Remove specifies a list of HTTP header names
                            to remove.
                          items:
                            type: string
                          type: array
                        set:
                          description: Set specifies a list of HTTP header values
                            that will be set in the HTTP header. If the header does
                            not exist it will be added, otherwise it will be overwritten
                            with the new value.
                          items:
                            description: HeaderValue represents a header name/value
                              pair
                            properties:
                              name:
                                description: Name represents a key of a header
                                minLength: 1
                                type: string
                              value:
                                description: Value represents the value of a header
                                  specified by a key
                                minLength: 1
                                type: string
                            required:
                            - name
                            - value
                            type: object
                          type: array
                      type: object
                    retryPolicy:
                      description: The retry policy for this route.
                      properties:
                        count:
                          description: NumRetries is maximum allowed number of retries.
                            If not supplied, the number of retries is one.
                          format: int64
                          minimum: 0
                          type: integer
                        perTryTimeout:
                          description: PerTryTimeout specifies the timeout per retry
                            attempt. Ignored if NumRetries is not supplied.
                          pattern: ^(((\d*(\.\d*)?h)|(\d*(\.\d*)?m)|(\d*(\.\d*)?s)|(\d*(\.\d*)?ms)|(\d*(\.\d*)?us)|(\d*(\.\d*)?µs)|(\d*(\.\d*)?ns))+|infinity|infinite)$
                          type: string
                        retriableStatusCodes:
                          description: "RetriableStatusCodes specifies the HTTP status
                            codes that should be retried. \n This field is only respected
                            when you include `retriable-status-codes` in the `RetryOn`
                            field."
                          items:
                            format: int32
                            type: integer
                          type: array
                        retryOn:
                          description: "RetryOn specifies the conditions on which
                            to retry a request. \n Supported [HTTP conditions](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#x-envoy-retry-on):
                            \n - `5xx` - `gateway-error` - `reset` - `connect-failure`
                            - `retriable-4xx` - `refused-stream` - `retriable-status-codes`
                            - `retriable-headers` \n Supported [gRPC conditions](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#x-envoy-retry-grpc-on):
                            \n - `cancelled` - `deadline-exceeded` - `internal` -
                            `resource-exhausted` - `unavailable`"
                          items:
                            description: RetryOn is a string type alias with validation
                              to ensure that the value is valid.
                            enum:
                            - 5xx
                            - gateway-error
                            - reset
                            - connect-failure
                            - retriable-4xx
                            - refused-stream
                            - retriable-status-codes
                            - retriable-headers
                            - cancelled
                            - deadline-exceeded
                            - internal
                            - resource-exhausted
                            - unavailable
                            type: string
                          type: array
                      type: object
                    services:
                      description: Services are the services to proxy traffic.
                      items:
                        description: Service defines an Kubernetes Service to proxy
                          traffic.
                        properties:
                          mirror:
                            description: If Mirror is true the Service will receive
                              a read only mirror of the traffic for this route.
                            type: boolean
                          name:
                            description: Name is the name of Kubernetes service to
                              proxy traffic. Names defined here will be used to look
                              up corresponding endpoints which contain the ips to
                              route.
                            type: string
                          port:
                            description: Port (defined as Integer) to proxy traffic
                              to since a service can have multiple defined.
                            exclusiveMaximum: true
                            maximum: 65536
                            minimum: 1
                            type: integer
                          protocol:
                            description: Protocol may be used to specify (or override)
                              the protocol used to reach this Service. Values may
                              be tls, h2, h2c. If omitted, protocol-selection falls
                              back on Service annotations.
                            enum:
                            - h2
                            - h2c
                            - tls
                            type: string
                          requestHeadersPolicy:
                            description: The policy for managing request headers during
                              proxying. Rewriting the 'Host' header is not supported.
                            properties:
                              remove:
                                description: Remove specifies a list of HTTP header
                                  names to remove.
                                items:
                                  type: string
                                type: array
                              set:
                                description: Set specifies a list of HTTP header values
                                  that will be set in the HTTP header. If the header
                                  does not exist it will be added, otherwise it will
                                  be overwritten with the new value.
                                items:
                                  description: HeaderValue represents a header name/value
                                    pair
                                  properties:
                                    name:
                                      description: Name represents a key of a header
                                      minLength: 1
                                      type: string
                                    value:
                                      description: Value represents the value of a
                                        header specified by a key
                                      minLength: 1
                                      type: string
                                  required:
                                  - name
                                  - value
                                  type: object
                                type: array
                            type: object
                          responseHeadersPolicy:
                            description: The policy for managing response headers
                              during proxying. Rewriting the 'Host' header is not
                              supported.
                            properties:
                              remove:
                                description: Remove specifies a list of HTTP header
                                  names to remove.
                                items:
                                  type: string
                                type: array
                              set:
                                description: Set specifies a list of HTTP header values
                                  that will be set in the HTTP header. If the header
                                  does not exist it will be added, otherwise it will
                                  be overwritten with the new value.
                                items:
                                  description: HeaderValue represents a header name/value
                                    pair
                                  properties:
                                    name:
                                      description: Name represents a key of a header
                                      minLength: 1
                                      type: string
                                    value:
                                      description: Value represents the value of a
                                        header specified by a key
                                      minLength: 1
                                      type: string
                                  required:
                                  - name
                                  - value
                                  type: object
                                type: array
                            type: object
                          validation:
                            description: UpstreamValidation defines how to verify
                              the backend service's certificate
                            properties:
                              caSecret:
                                description: Name of the Kubernetes secret be used
                                  to validate the certificate presented by the backend
                                type: string
                              subjectName:
                                description: Key which is expected to be present in
                                  the 'subjectAltName' of the presented certificate
                                type: string
                            required:
                            - caSecret
                            - subjectName
                            type: object
                          weight:
                            description: Weight defines percentage of traffic to balance
                              traffic
                            format: int64
                            minimum: 0
                            type: integer
                        required:
                        - name
                        - port
                        type: object
                      minItems: 1
                      type: array
                    timeoutPolicy:
                      description: The timeout policy for this route.
                      properties:
                        idle:
                          description: Timeout after which, if there are no active
                            requests for this route, the connection between Envoy
                            and the backend or Envoy and the external client will
                            be closed. If not specified, there is no per-route idle
                            timeout, though a connection manager-wide stream_idle_timeout
                            default of 5m still applies.
                          pattern: ^(((\d*(\.\d*)?h)|(\d*(\.\d*)?m)|(\d*(\.\d*)?s)|(\d*(\.\d*)?ms)|(\d*(\.\d*)?us)|(\d*(\.\d*)?µs)|(\d*(\.\d*)?ns))+|infinity|infinite)$
                          type: string
                        response:
                          description: Timeout for receiving a response from the server
                            after processing a request from client. If not supplied,
                            Envoy's default value of 15s applies.
                          pattern: ^(((\d*(\.\d*)?h)|(\d*(\.\d*)?m)|(\d*(\.\d*)?s)|(\d*(\.\d*)?ms)|(\d*(\.\d*)?us)|(\d*(\.\d*)?µs)|(\d*(\.\d*)?ns))+|infinity|infinite)$
                          type: string
                      type: object
                  required:
                  - services
                  type: object
                type: array
              tcpproxy:
                description: TCPProxy holds TCP proxy information.
                properties:
                  healthCheckPolicy:
                    description: The health check policy for this tcp proxy
                    properties:
                      healthyThresholdCount:
                        description: The number of healthy health checks required
                          before a host is marked healthy
                        format: int32
                        type: integer
                      intervalSeconds:
                        description: The interval (seconds) between health checks
                        format: int64
                        type: integer
                      timeoutSeconds:
                        description: The time to wait (seconds) for a health check
                          response
                        format: int64
                        type: integer
                      unhealthyThresholdCount:
                        description: The number of unhealthy health checks required
                          before a host is marked unhealthy
                        format: int32
                        type: integer
                    type: object
                  include:
                    description: Include specifies that this tcpproxy should be delegated
                      to another HTTPProxy.
                    properties:
                      name:
                        description: Name of the child HTTPProxy
                        type: string
                      namespace:
                        description: Namespace of the HTTPProxy to include. Defaults
                          to the current namespace if not supplied.
                        type: string
                    required:
                    - name
                    type: object
                  includes:
                    description: "IncludesDeprecated allow for specific routing configuration
                      to be appended to another HTTPProxy in another namespace. \n
                      Exists due to a mistake when developing HTTPProxy and the field
                      was marked plural when it should have been singular. This field
                      should stay to not break backwards compatibility to v1 users."
                    properties:
                      name:
                        description: Name of the child HTTPProxy
                        type: string
                      namespace:
                        description: Namespace of the HTTPProxy to include. Defaults
                          to the current namespace if not supplied.
                        type: string
                    required:
                    - name
                    type: object
                  loadBalancerPolicy:
                    description: The load balancing policy for the backend services.
                      Note that the `Cookie` and `RequestHash` load balancing strategies
                      cannot be used here.
                    properties:
                      requestHashPolicies:
                        description: RequestHashPolicies contains a list of hash policies
                          to apply when the `RequestHash` load balancing strategy
                          is chosen. If an element of the supplied list of hash policies
                          is invalid, it will be ignored. If the list of hash policies
                          is empty after validation, the load balancing strategy will
                          fall back the the default `RoundRobin`.
                        items:
                          description: RequestHashPolicy contains configuration for
                            an individual hash policy on a request attribute.
                          properties:
                            headerHashOptions:
                              description: HeaderHashOptions should be set when request
                                header hash based load balancing is desired. It must
                                be the only hash option field set, otherwise this
                                request hash policy object will be ignored.
                              properties:
                                headerName:
                                  description: HeaderName is the name of the HTTP
                                    request header that will be used to calculate
                                    the hash key. If the header specified is not present
                                    on a request, no hash will be produced.
                                  minLength: 1
                                  type: string
                              type: object
                            terminal:
                              description: Terminal is a flag that allows for short-circuiting
                                computing of a hash for a given request. If set to
                                true, and the request attribute specified in the attribute
                                hash options is present, no further hash policies
                                will be used to calculate a hash for the request.
                              type: boolean
                          type: object
                        type: array
                      strategy:
                        description: Strategy specifies the policy used to balance
                          requests across the pool of backend pods. Valid policy names
                          are `Random`, `RoundRobin`, `WeightedLeastRequest`, `Cookie`,
                          and `RequestHash`. If an unknown strategy name is specified
                          or no policy is supplied, the default `RoundRobin` policy
                          is used.
                        type: string
                    type: object
                  services:
                    description: Services are the services to proxy traffic
                    items:
                      description: Service defines an Kubernetes Service to proxy
                        traffic.
                      properties:
                        mirror:
                          description: If Mirror is true the Service will receive
                            a read only mirror of the traffic for this route.
                          type: boolean
                        name:
                          description: Name is the name of Kubernetes service to proxy
                            traffic. Names defined here will be used to look up corresponding
                            endpoints which contain the ips to route.
                          type: string
                        port:
                          description: Port (defined as Integer) to proxy traffic
                            to since a service can have multiple defined.
                          exclusiveMaximum: true
                          maximum: 65536
                          minimum: 1
                          type: integer
                        protocol:
                          description: Protocol may be used to specify (or override)
                            the protocol used to reach this Service. Values may be
                            tls, h2, h2c. If omitted, protocol-selection falls back
                            on Service annotations.
                          enum:
                          - h2
                          - h2c
                          - tls
                          type: string
                        requestHeadersPolicy:
                          description: The policy for managing request headers during
                            proxying. Rewriting the 'Host' header is not supported.
                          properties:
                            remove:
                              description: Remove specifies a list of HTTP header
                                names to remove.
                              items:
                                type: string
                              type: array
                            set:
                              description: Set specifies a list of HTTP header values
                                that will be set in the HTTP header. If the header
                                does not exist it will be added, otherwise it will
                                be overwritten with the new value.
                              items:
                                description: HeaderValue represents a header name/value
                                  pair
                                properties:
                                  name:
                                    description: Name represents a key of a header
                                    minLength: 1
                                    type: string
                                  value:
                                    description: Value represents the value of a header
                                      specified by a key
                                    minLength: 1
                                    type: string
                                required:
                                - name
                                - value
                                type: object
                              type: array
                          type: object
                        responseHeadersPolicy:
                          description: The policy for managing response headers during
                            proxying. Rewriting the 'Host' header is not supported.
                          properties:
                            remove:
                              description: Remove specifies a list of HTTP header
                                names to remove.
                              items:
                                type: string
                              type: array
                            set:
                              description: Set specifies a list of HTTP header values
                                that will be set in the HTTP header. If the header
                                does not exist it will be added, otherwise it will
                                be overwritten with the new value.
                              items:
                                description: HeaderValue represents a header name/value
                                  pair
                                properties:
                                  name:
                                    description: Name represents a key of a header
                                    minLength: 1
                                    type: string
                                  value:
                                    description: Value represents the value of a header
                                      specified by a key
                                    minLength: 1
                                    type: string
                                required:
                                - name
                                - value
                                type: object
                              type: array
                          type: object
                        validation:
                          description: UpstreamValidation defines how to verify the
                            backend service's certificate
                          properties:
                            caSecret:
                              description: Name of the Kubernetes secret be used to
                                validate the certificate presented by the backend
                              type: string
                            subjectName:
                              description: Key which is expected to be present in
                                the 'subjectAltName' of the presented certificate
                              type: string
                          required:
                          - caSecret
                          - subjectName
                          type: object
                        weight:
                          description: Weight defines percentage of traffic to balance
                            traffic
                          format: int64
                          minimum: 0
                          type: integer
                      required:
                      - name
                      - port
                      type: object
                    type: array
                type: object
              virtualhost:
                description: Virtualhost appears at most once. If it is present, the
                  object is considered to be a "root" HTTPProxy.
                properties:
                  authorization:
                    description: This field configures an extension service to perform
                      authorization for this virtual host. Authorization can only
                      be configured on virtual hosts that have TLS enabled. If the
                      TLS configuration requires client certificate validation, the
                      client certificate is always included in the authentication
                      check request.
                    properties:
                      authPolicy:
                        description: AuthPolicy sets a default authorization policy
                          for client requests. This policy will be used unless overridden
                          by individual routes.
                        properties:
                          context:
                            additionalProperties:
                              type: string
                            description: Context is a set of key/value pairs that
                              are sent to the authentication server in the check request.
                              If a context is provided at an enclosing scope, the
                              entries are merged such that the inner scope overrides
                              matching keys from the outer scope.
                            type: object
                          disabled:
                            description: When true, this field disables client request
                              authentication for the scope of the policy.
                            type: boolean
                        type: object
                      extensionRef:
                        description: ExtensionServiceRef specifies the extension resource
                          that will authorize client requests.
                        properties:
                          apiVersion:
                            description: API version of the referent. If this field
                              is not specified, the default "projectcontour.io/v1alpha1"
                              will be used
                            minLength: 1
                            type: string
                          name:
                            description: "Name of the referent. \n More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
                            minLength: 1
                            type: string
                          namespace:
                            description: "Namespace of the referent. If this field
                              is not specifies, the namespace of the resource that
                              targets the referent will be used. \n More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"
                            minLength: 1
                            type: string
                        type: object
                      failOpen:
                        description: If FailOpen is true, the client request is forwarded
                          to the upstream service even if the authorization server
                          fails to respond. This field should not be set in most cases.
                          It is intended for use only while migrating applications
                          from internal authorization to Contour external authorization.
                        type: boolean
                      responseTimeout:
                        description: ResponseTimeout configures maximum time to wait
                          for a check response from the authorization server. Timeout
                          durations are expressed in the Go [Duration format](https://godoc.org/time#ParseDuration).
                          Valid time units are "ns", "us" (or "µs"), "ms", "s", "m",
                          "h". The string "infinity" is also a valid input and specifies
                          no timeout.
                        pattern: ^(((\d*(\.\d*)?h)|(\d*(\.\d*)?m)|(\d*(\.\d*)?s)|(\d*(\.\d*)?ms)|(\d*(\.\d*)?us)|(\d*(\.\d*)?µs)|(\d*(\.\d*)?ns))+|infinity|infinite)$
                        type: string
                    required:
                    - extensionRef
                    type: object
                  corsPolicy:
                    description: Specifies the cross-origin policy to apply to the
                      VirtualHost.
                    properties:
                      allowCredentials:
                        description: Specifies whether the resource allows credentials.
                        type: boolean
                      allowHeaders:
                        description: AllowHeaders specifies the content for the *access-control-allow-headers*
                          header.
                        items:
                          description: CORSHeaderValue specifies the value of the
                            string headers returned by a cross-domain request.
                          pattern: ^[a-zA-Z0-9!#$%&'*+.^_`|~-]+$
                          type: string
                        type: array
                      allowMethods:
                        description: AllowMethods specifies the content for the *access-control-allow-methods*
                          header.
                        items:
                          description: CORSHeaderValue specifies the value of the
                            string headers returned by a cross-domain request.
                          pattern: ^[a-zA-Z0-9!#$%&'*+.^_`|~-]+$
                          type: string
                        type: array
                      allowOrigin:
                        description: AllowOrigin specifies the origins that will be
                          allowed to do CORS requests. "*" means allow any origin.
                        items:
                          type: string
                        type: array
                      exposeHeaders:
                        description: ExposeHeaders Specifies the content for the *access-control-expose-headers*
                          header.
                        items:
                          description: CORSHeaderValue specifies the value of the
                            string headers returned by a cross-domain request.
                          pattern: ^[a-zA-Z0-9!#$%&'*+.^_`|~-]+$
                          type: string
                        type: array
                      maxAge:
                        description: MaxAge indicates for how long the results of
                          a preflight request can be cached. MaxAge durations are
                          expressed in the Go [Duration format](https://godoc.org/time#ParseDuration).
                          Valid time units are "ns", "us" (or "µs"), "ms", "s", "m",
                          "h". Only positive values are allowed while 0 disables the
                          cache requiring a preflight OPTIONS check for all cross-origin
                          requests.
                        type: string
                    required:
                    - allowMethods
                    - allowOrigin
                    type: object
                  fqdn:
                    description: The fully qualified domain name of the root of the
                      ingress tree all leaves of the DAG rooted at this object relate
                      to the fqdn.
                    type: string
                  rateLimitPolicy:
                    description: The policy for rate limiting on the virtual host.
                    properties:
                      global:
                        description: Global defines global rate limiting parameters,
                          i.e. parameters defining descriptors that are sent to an
                          external rate limit service (RLS) for a rate limit decision
                          on each request.
                        properties:
                          descriptors:
                            description: Descriptors defines the list of descriptors
                              that will be generated and sent to the rate limit service.
                              Each descriptor contains 1+ key-value pair entries.
                            items:
                              description: RateLimitDescriptor defines a list of key-value
                                pair generators.
                              properties:
                                entries:
                                  description: Entries is the list of key-value pair
                                    generators.
                                  items:
                                    description: RateLimitDescriptorEntry is a key-value
                                      pair generator. Exactly one field on this struct
                                      must be non-nil.
                                    properties:
                                      genericKey:
                                        description: GenericKey defines a descriptor
                                          entry with a static key and value.
                                        properties:
                                          key:
                                            description: Key defines the key of the
                                              descriptor entry. If not set, the key
                                              is set to "generic_key".
                                            type: string
                                          value:
                                            description: Value defines the value of
                                              the descriptor entry.
                                            minLength: 1
                                            type: string
                                        type: object
                                      remoteAddress:
                                        description: RemoteAddress defines a descriptor
                                          entry with a key of "remote_address" and
                                          a value equal to the client's IP address
                                          (from x-forwarded-for).
                                        type: object
                                      requestHeader:
                                        description: RequestHeader defines a descriptor
                                          entry that's populated only if a given header
                                          is present on the request. The descriptor
                                          key is static, and the descriptor value
                                          is equal to the value of the header.
                                        properties:
                                          descriptorKey:
                                            description: DescriptorKey defines the
                                              key to use on the descriptor entry.
                                            minLength: 1
                                            type: string
                                          headerName:
                                            description: HeaderName defines the name
                                              of the header to look for on the request.
                                            minLength: 1
                                            type: string
                                        type: object
                                      requestHeaderValueMatch:
                                        description: RequestHeaderValueMatch defines
                                          a descriptor entry that's populated if the
                                          request's headers match a set of 1+ match
                                          criteria. The descriptor key is "header_match",
                                          and the descriptor value is static.
                                        properties:
                                          expectMatch:
                                            default: true
                                            description: ExpectMatch defines whether
                                              the request must positively match the
                                              match criteria in order to generate
                                              a descriptor entry (i.e. true), or not
                                              match the match criteria in order to
                                              generate a descriptor entry (i.e. false).
                                              The default is true.
                                            type: boolean
                                          headers:
                                            description: Headers is a list of 1+ match
                                              criteria to apply against the request
                                              to determine whether to populate the
                                              descriptor entry or not.
                                            items:
                                              description: HeaderMatchCondition specifies
                                                how to conditionally match against
                                                HTTP headers. The Name field is required,
                                                but only one of the remaining fields
                                                should be be provided.
                                              properties:
                                                contains:
                                                  description: Contains specifies
                                                    a substring that must be present
                                                    in the header value.
                                                  type: string
                                                exact:
                                                  description: Exact specifies a string
                                                    that the header value must be
                                                    equal to.
                                                  type: string
                                                name:
                                                  description: Name is the name of
                                                    the header to match against. Name
                                                    is required. Header names are
                                                    case insensitive.
                                                  type: string
                                                notcontains:
                                                  description: NotContains specifies
                                                    a substring that must not be present
                                                    in the header value.
                                                  type: string
                                                notexact:
                                                  description: NoExact specifies a
                                                    string that the header value must
                                                    not be equal to. The condition
                                                    is true if the header has any
                                                    other value.
                                                  type: string
                                                notpresent:
                                                  description: NotPresent specifies
                                                    that condition is true when the
                                                    named header is not present. Note
                                                    that setting NotPresent to false
                                                    does not make the condition true
                                                    if the named header is present.
                                                  type: boolean
                                                present:
                                                  description: Present specifies that
                                                    condition is true when the named
                                                    header is present, regardless
                                                    of its value. Note that setting
                                                    Present to false does not make
                                                    the condition true if the named
                                                    header is absent.
                                                  type: boolean
                                              required:
                                              - name
                                              type: object
                                            minItems: 1
                                            type: array
                                          value:
                                            description: Value defines the value of
                                              the descriptor entry.
                                            minLength: 1
                                            type: string
                                        type: object
                                    type: object
                                  minItems: 1
                                  type: array
                              type: object
                            minItems: 1
                            type: array
                        type: object
                      local:
                        description: Local defines local rate limiting parameters,
                          i.e. parameters for rate limiting that occurs within each
                          Envoy pod as requests are handled.
                        properties:
                          burst:
                            description: Burst defines the number of requests above
                              the requests per unit that should be allowed within
                              a short period of time.
                            format: int32
                            type: integer
                          requests:
                            description: Requests defines how many requests per unit
                              of time should be allowed before rate limiting occurs.
                            format: int32
                            minimum: 1
                            type: integer
                          responseHeadersToAdd:
                            description: ResponseHeadersToAdd is an optional list
                              of response headers to set when a request is rate-limited.
                            items:
                              description: HeaderValue represents a header name/value
                                pair
                              properties:
                                name:
                                  description: Name represents a key of a header
                                  minLength: 1
                                  type: string
                                value:
                                  description: Value represents the value of a header
                                    specified by a key
                                  minLength: 1
                                  type: string
                              required:
                              - name
                              - value
                              type: object
                            type: array
                          responseStatusCode:
                            description: ResponseStatusCode is the HTTP status code
                              to use for responses to rate-limited requests. Codes
                              must be in the 400-599 range (inclusive). If not specified,
                              the Envoy default of 429 (Too Many Requests) is used.
                            format: int32
                            maximum: 599
                            minimum: 400
                            type: integer
                          unit:
                            description: Unit defines the period of time within which
                              requests over the limit will be rate limited. Valid
                              values are "second", "minute" and "hour".
                            enum:
                            - second
                            - minute
                            - hour
                            type: string
                        required:
                        - requests
                        - unit
                        type: object
                    type: object
                  tls:
                    description: If present the fields describes TLS properties of
                      the virtual host. The SNI names that will be matched on are
                      described in fqdn, the tls.secretName secret must contain a
                      certificate that itself contains a name that matches the FQDN.
                    properties:
                      clientValidation:
                        description: "ClientValidation defines how to verify the client
                          certificate when an external client establishes a TLS connection
                          to Envoy. \n This setting: \n 1. Enables TLS client certificate
                          validation. 2. Specifies how the client certificate will
                          be validated (i.e.    validation required or skipped). \n
                          Note: Setting client certificate validation to be skipped
                          should be only used in conjunction with an external authorization
                          server that performs client validation as Contour will ensure
                          client certificates are passed along."
                        properties:
                          caSecret:
                            description: Name of a Kubernetes secret that contains
                              a CA certificate bundle. The client certificate must
                              validate against the certificates in the bundle. If
                              specified and SkipClientCertValidation is true, client
                              certificates will be required on requests.
                            minLength: 1
                            type: string
                          skipClientCertValidation:
                            description: SkipClientCertValidation disables downstream
                              client certificate validation. Defaults to false. This
                              field is intended to be used in conjunction with external
                              authorization in order to enable the external authorization
                              server to validate client certificates. When this field
                              is set to true, client certificates are requested but
                              not verified by Envoy. If CACertificate is specified,
                              client certificates are required on requests, but not
                              verified. If external authorization is in use, they
                              are presented to the external authorization server.
                            type: boolean
                        type: object
                      enableFallbackCertificate:
                        description: EnableFallbackCertificate defines if the vhost
                          should allow a default certificate to be applied which handles
                          all requests which don't match the SNI defined in this vhost.
                        type: boolean
                      minimumProtocolVersion:
                        description: MinimumProtocolVersion is the minimum TLS version
                          this vhost should negotiate. Valid options are `1.2` (default)
                          and `1.3`. Any other value defaults to TLS 1.2.
                        type: string
                      passthrough:
                        description: Passthrough defines whether the encrypted TLS
                          handshake will be passed through to the backing cluster.
                          Either Passthrough or SecretName must be specified, but
                          not both.
                        type: boolean
                      secretName:
                        description: SecretName is the name of a TLS secret in the
                          current namespace. Either SecretName or Passthrough must
                          be specified, but not both. If specified, the named secret
                          must contain a matching certificate for the virtual host's
                          FQDN.
                        type: string
                    type: object
                required:
                - fqdn
                type: object
            type: object
          status:
            description: Status is a container for computed information about the
              HTTPProxy.
            properties:
              conditions:
                description: "Conditions contains information about the current status
                  of the HTTPProxy, in an upstream-friendly container. \n Contour
                  will update a single condition, `Valid`, that is in normal-true
                  polarity. That is, when `currentStatus` is `valid`, the `Valid`
                  condition will be `status: true`, and vice versa. \n Contour will
                  leave untouched any other Conditions set in this block, in case
                  some other controller wants to add a Condition. \n If you are another
                  controller owner and wish to add a condition, you *should* namespace
                  your condition with a label, like `controller.domain.com/ConditionName`."
                items:
                  description: "DetailedCondition is an extension of the normal Kubernetes
                    conditions, with two extra fields to hold sub-conditions, which
                    provide more detailed reasons for the state (True or False) of
                    the condition. \n `errors` holds information about sub-conditions
                    which are fatal to that condition and render its state False.
                    \n `warnings` holds information about sub-conditions which are
                    not fatal to that condition and do not force the state to be False.
                    \n Remember that Conditions have a type, a status, and a reason.
                    \n The type is the type of the condition, the most important one
                    in this CRD set is `Valid`. `Valid` is a positive-polarity condition:
                    when it is `status: true` there are no problems. \n In more detail,
                    `status: true` means that the object is has been ingested into
                    Contour with no errors. `warnings` may still be present, and will
                    be indicated in the Reason field. There must be zero entries in
                    the `errors` slice in this case. \n `Valid`, `status: false` means
                    that the object has had one or more fatal errors during processing
                    into Contour.  The details of the errors will be present under
                    the `errors` field. There must be at least one error in the `errors`
                    slice if `status` is `false`. \n For DetailedConditions of types
                    other than `Valid`, the Condition must be in the negative polarity.
                    When they have `status` `true`, there is an error. There must
                    be at least one entry in the `errors` Subcondition slice. When
                    they have `status` `false`, there are no serious errors, and there
                    must be zero entries in the `errors` slice. In either case, there
                    may be entries in the `warnings` slice. \n Regardless of the polarity,
                    the `reason` and `message` fields must be updated with either
                    the detail of the reason (if there is one and only one entry in
                    total across both the `errors` and `warnings` slices), or `MultipleReasons`
                    if there is more than one entry."
                  properties:
                    errors:
                      description: "Errors contains a slice of relevant error subconditions
                        for this object. \n Subconditions are expected to appear when
                        relevant (when there is a error), and disappear when not relevant.
                        An empty slice here indicates no errors."
                      items:
                        description: "SubCondition is a Condition-like type intended
                          for use as a subcondition inside a DetailedCondition. \n
                          It contains a subset of the Condition fields. \n It is intended
                          for warnings and errors, so `type` names should use abnormal-true
                          polarity, that is, they should be of the form \"ErrorPresent:
                          true\". \n The expected lifecycle for these errors is that
                          they should only be present when the error or warning is,
                          and should be removed when they are not relevant."
                        properties:
                          message:
                            description: "Message is a human readable message indicating
                              details about the transition. \n This may be an empty
                              string."
                            maxLength: 32768
                            type: string
                          reason:
                            description: "Reason contains a programmatic identifier
                              indicating the reason for the condition's last transition.
                              Producers of specific condition types may define expected
                              values and meanings for this field, and whether the
                              values are considered a guaranteed API. \n The value
                              should be a CamelCase string. \n This field may not
                              be empty."
                            maxLength: 1024
                            minLength: 1
                            pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                            type: string
                          status:
                            description: Status of the condition, one of True, False,
                              Unknown.
                            enum:
                            - "True"
                            - "False"
                            - Unknown
                            type: string
                          type:
                            description: "Type of condition in `CamelCase` or in `foo.example.com/CamelCase`.
                              \n This must be in abnormal-true polarity, that is,
                              `ErrorFound` or `controller.io/ErrorFound`. \n The regex
                              it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)"
                            maxLength: 316
                            pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                            type: string
                        required:
                        - message
                        - reason
                        - status
                        - type
                        type: object
                      type: array
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                    warnings:
                      description: "Warnings contains a slice of relevant warning
                        subconditions for this object. \n Subconditions are expected
                        to appear when relevant (when there is a warning), and disappear
                        when not relevant. An empty slice here indicates no warnings."
                      items:
                        description: "SubCondition is a Condition-like type intended
                          for use as a subcondition inside a DetailedCondition. \n
                          It contains a subset of the Condition fields. \n It is intended
                          for warnings and errors, so `type` names should use abnormal-true
                          polarity, that is, they should be of the form \"ErrorPresent:
                          true\". \n The expected lifecycle for these errors is that
                          they should only be present when the error or warning is,
                          and should be removed when they are not relevant."
                        properties:
                          message:
                            description: "Message is a human readable message indicating
                              details about the transition. \n This may be an empty
                              string."
                            maxLength: 32768
                            type: string
                          reason:
                            description: "Reason contains a programmatic identifier
                              indicating the reason for the condition's last transition.
                              Producers of specific condition types may define expected
                              values and meanings for this field, and whether the
                              values are considered a guaranteed API. \n The value
                              should be a CamelCase string. \n This field may not
                              be empty."
                            maxLength: 1024
                            minLength: 1
                            pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                            type: string
                          status:
                            description: Status of the condition, one of True, False,
                              Unknown.
                            enum:
                            - "True"
                            - "False"
                            - Unknown
                            type: string
                          type:
                            description: "Type of condition in `CamelCase` or in `foo.example.com/CamelCase`.
                              \n This must be in abnormal-true polarity, that is,
                              `ErrorFound` or `controller.io/ErrorFound`. \n The regex
                              it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)"
                            maxLength: 316
                            pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                            type: string
                        required:
                        - message
                        - reason
                        - status
                        - type
                        type: object
                      type: array
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
              currentStatus:
                type: string
              description:
                type: string
              loadBalancer:
                description: LoadBalancer contains the current status of the load
                  balancer.
                properties:
                  ingress:
                    description: Ingress is a list containing ingress points for the
                      load-balancer. Traffic intended for the service should be sent
                      to these ingress points.
                    items:
                      description: 'LoadBalancerIngress represents the status of a
                        load-balancer ingress point: traffic intended for the service
                        should be sent to an ingress point.'
                      properties:
                        hostname:
                          description: Hostname is set for load-balancer ingress points
                            that are DNS based (typically AWS load-balancers)
                          type: string
                        ip:
                          description: IP is set for load-balancer ingress points
                            that are IP based (typically GCE or OpenStack load-balancers)
                          type: string
                        ports:
                          description: Ports is a list of records of service ports
                            If used, every port defined in the service should have
                            an entry in it
                          items:
                            properties:
                              error:
                                description: 'Error is to record the problem with
                                  the service port The format of the error shall comply
                                  with the following rules: - built-in error values
                                  shall be specified in this file and those shall
                                  use   CamelCase names - cloud provider specific
                                  error values must have names that comply with the   format
                                  foo.example.com/CamelCase. --- The regex it matches
                                  is (dns1123SubdomainFmt/)?(qualifiedNameFmt)'
                                maxLength: 316
                                pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                                type: string
                              port:
                                description: Port is the port number of the service
                                  port of which status is recorded here
                                format: int32
                                type: integer
                              protocol:
                                default: TCP
                                description: 'Protocol is the protocol of the service
                                  port of which status is recorded here The supported
                                  values are: "TCP", "UDP", "SCTP"'
                                type: string
                            required:
                            - port
                            - protocol
                            type: object
                          type: array
                          x-kubernetes-list-type: atomic
                      type: object
                    type: array
                type: object
            type: object
        required:
        - metadata
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: flyte/charts/contour/templates/00-crds.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.5.0
  creationTimestamp: null
  name: tlscertificatedelegations.projectcontour.io
spec:
  preserveUnknownFields: false
  group: projectcontour.io
  names:
    kind: TLSCertificateDelegation
    listKind: TLSCertificateDelegationList
    plural: tlscertificatedelegations
    shortNames:
    - tlscerts
    singular: tlscertificatedelegation
  scope: Namespaced
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: TLSCertificateDelegation is an TLS Certificate Delegation CRD
          specification. See design/tls-certificate-delegation.md for details.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: TLSCertificateDelegationSpec defines the spec of the CRD
            properties:
              delegations:
                items:
                  description: CertificateDelegation maps the authority to reference
                    a secret in the current namespace to a set of namespaces.
                  properties:
                    secretName:
                      description: required, the name of a secret in the current namespace.
                      type: string
                    targetNamespaces:
                      description: required, the namespaces the authority to reference
                        the the secret will be delegated to. If TargetNamespaces is
                        nil or empty, the CertificateDelegation' is ignored. If the
                        TargetNamespace list contains the character, "*" the secret
                        will be delegated to all namespaces.
                      items:
                        type: string
                      type: array
                  required:
                  - secretName
                  - targetNamespaces
                  type: object
                type: array
            required:
            - delegations
            type: object
          status:
            description: TLSCertificateDelegationStatus allows for the status of the
              delegation to be presented to the user.
            properties:
              conditions:
                description: "Conditions contains information about the current status
                  of the HTTPProxy, in an upstream-friendly container. \n Contour
                  will update a single condition, `Valid`, that is in normal-true
                  polarity. That is, when `currentStatus` is `valid`, the `Valid`
                  condition will be `status: true`, and vice versa. \n Contour will
                  leave untouched any other Conditions set in this block, in case
                  some other controller wants to add a Condition. \n If you are another
                  controller owner and wish to add a condition, you *should* namespace
                  your condition with a label, like `controller.domain.com\\ConditionName`."
                items:
                  description: "DetailedCondition is an extension of the normal Kubernetes
                    conditions, with two extra fields to hold sub-conditions, which
                    provide more detailed reasons for the state (True or False) of
                    the condition. \n `errors` holds information about sub-conditions
                    which are fatal to that condition and render its state False.
                    \n `warnings` holds information about sub-conditions which are
                    not fatal to that condition and do not force the state to be False.
                    \n Remember that Conditions have a type, a status, and a reason.
                    \n The type is the type of the condition, the most important one
                    in this CRD set is `Valid`. `Valid` is a positive-polarity condition:
                    when it is `status: true` there are no problems. \n In more detail,
                    `status: true` means that the object is has been ingested into
                    Contour with no errors. `warnings` may still be present, and will
                    be indicated in the Reason field. There must be zero entries in
                    the `errors` slice in this case. \n `Valid`, `status: false` means
                    that the object has had one or more fatal errors during processing
                    into Contour.  The details of the errors will be present under
                    the `errors` field. There must be at least one error in the `errors`
                    slice if `status` is `false`. \n For DetailedConditions of types
                    other than `Valid`, the Condition must be in the negative polarity.
                    When they have `status` `true`, there is an error. There must
                    be at least one entry in the `errors` Subcondition slice. When
                    they have `status` `false`, there are no serious errors, and there
                    must be zero entries in the `errors` slice. In either case, there
                    may be entries in the `warnings` slice. \n Regardless of the polarity,
                    the `reason` and `message` fields must be updated with either
                    the detail of the reason (if there is one and only one entry in
                    total across both the `errors` and `warnings` slices), or `MultipleReasons`
                    if there is more than one entry."
                  properties:
                    errors:
                      description: "Errors contains a slice of relevant error subconditions
                        for this object. \n Subconditions are expected to appear when
                        relevant (when there is a error), and disappear when not relevant.
                        An empty slice here indicates no errors."
                      items:
                        description: "SubCondition is a Condition-like type intended
                          for use as a subcondition inside a DetailedCondition. \n
                          It contains a subset of the Condition fields. \n It is intended
                          for warnings and errors, so `type` names should use abnormal-true
                          polarity, that is, they should be of the form \"ErrorPresent:
                          true\". \n The expected lifecycle for these errors is that
                          they should only be present when the error or warning is,
                          and should be removed when they are not relevant."
                        properties:
                          message:
                            description: "Message is a human readable message indicating
                              details about the transition. \n This may be an empty
                              string."
                            maxLength: 32768
                            type: string
                          reason:
                            description: "Reason contains a programmatic identifier
                              indicating the reason for the condition's last transition.
                              Producers of specific condition types may define expected
                              values and meanings for this field, and whether the
                              values are considered a guaranteed API. \n The value
                              should be a CamelCase string. \n This field may not
                              be empty."
                            maxLength: 1024
                            minLength: 1
                            pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                            type: string
                          status:
                            description: Status of the condition, one of True, False,
                              Unknown.
                            enum:
                            - "True"
                            - "False"
                            - Unknown
                            type: string
                          type:
                            description: "Type of condition in `CamelCase` or in `foo.example.com/CamelCase`.
                              \n This must be in abnormal-true polarity, that is,
                              `ErrorFound` or `controller.io/ErrorFound`. \n The regex
                              it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)"
                            maxLength: 316
                            pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                            type: string
                        required:
                        - message
                        - reason
                        - status
                        - type
                        type: object
                      type: array
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                    warnings:
                      description: "Warnings contains a slice of relevant warning
                        subconditions for this object. \n Subconditions are expected
                        to appear when relevant (when there is a warning), and disappear
                        when not relevant. An empty slice here indicates no warnings."
                      items:
                        description: "SubCondition is a Condition-like type intended
                          for use as a subcondition inside a DetailedCondition. \n
                          It contains a subset of the Condition fields. \n It is intended
                          for warnings and errors, so `type` names should use abnormal-true
                          polarity, that is, they should be of the form \"ErrorPresent:
                          true\". \n The expected lifecycle for these errors is that
                          they should only be present when the error or warning is,
                          and should be removed when they are not relevant."
                        properties:
                          message:
                            description: "Message is a human readable message indicating
                              details about the transition. \n This may be an empty
                              string."
                            maxLength: 32768
                            type: string
                          reason:
                            description: "Reason contains a programmatic identifier
                              indicating the reason for the condition's last transition.
                              Producers of specific condition types may define expected
                              values and meanings for this field, and whether the
                              values are considered a guaranteed API. \n The value
                              should be a CamelCase string. \n This field may not
                              be empty."
                            maxLength: 1024
                            minLength: 1
                            pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                            type: string
                          status:
                            description: Status of the condition, one of True, False,
                              Unknown.
                            enum:
                            - "True"
                            - "False"
                            - Unknown
                            type: string
                          type:
                            description: "Type of condition in `CamelCase` or in `foo.example.com/CamelCase`.
                              \n This must be in abnormal-true polarity, that is,
                              `ErrorFound` or `controller.io/ErrorFound`. \n The regex
                              it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)"
                            maxLength: 316
                            pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                            type: string
                        required:
                        - message
                        - reason
                        - status
                        - type
                        type: object
                      type: array
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
            type: object
        required:
        - metadata
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: flyte/charts/flyte/templates/propeller/crds/flyteworkflow.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: flyteworkflows.flyte.lyft.com
spec:
  group: flyte.lyft.com
  names:
    kind: FlyteWorkflow
    plural: flyteworkflows
    shortNames:
      - fly
    singular: flyteworkflow
  scope: Namespaced
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          x-kubernetes-preserve-unknown-fields: true
          properties:
---
# Source: flyte/charts/contour/templates/contour/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: flyte-contour-contour
  labels:
    app.kubernetes.io/name: contour
    helm.sh/chart: contour-5.0.0
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - list
  - apiGroups:
      - networking.k8s.io
    resources:
      - gatewayclasses
      - gateways
      - httproutes
      - tcproutes
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingressclasses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses/status
    verbs:
      - create
      - get
      - update
  - apiGroups:
      - projectcontour.io
    resources:
      - extensionservices
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - projectcontour.io
    resources:
      - extensionservices/status
    verbs:
      - create
      - get
      - update
  - apiGroups:
      - projectcontour.io
    resources:
      - httpproxies
      - tlscertificatedelegations
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - projectcontour.io
    resources:
      - httpproxies/status
    verbs:
      - create
      - get
      - update
---
# Source: flyte/charts/flyte/templates/admin/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: flyteadmin
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-v0.1.10
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - ""
  - flyte.lyft.com
  - rbac.authorization.k8s.io
  resources:
  - configmaps
  - flyteworkflows
  - namespaces
  - pods
  - resourcequotas
  - roles
  - rolebindings
  - secrets
  - services
  - serviceaccounts
  - spark-role
  verbs:
  - '*'
---
# Source: flyte/charts/flyte/templates/propeller/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: flytepropeller
  labels: 
    app.kubernetes.io/name: flytepropeller
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-v0.1.10
    app.kubernetes.io/managed-by: Helm
rules:
# Allow RO access to PODS
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
# Allow Event recording access
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - update
  - delete
  - patch
# Allow Access All plugin objects
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
  - patch
# Allow Access to CRD
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - update
# Allow Access to all resources under flyte.lyft.com
- apiGroups:
  - flyte.lyft.com
  resources:
  - flyteworkflows
  - flyteworkflows/finalizers
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
  - patch
  - post
  - deletecollection
---
# Source: flyte/charts/flyte/templates/propeller/webhook.yaml
# Create a ClusterRole for the webhook
# https://kubernetes.io/docs/admin/authorization/rbac/
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: flyte-pod-webhook
  namespace: flyte
rules:
  - apiGroups:
      - "*"
    resources:
      - mutatingwebhookconfigurations
      - secrets
      - pods
    verbs:
      - get
      - create
      - update
      - patch
---
# Source: flyte/charts/kubernetes-dashboard/templates/clusterrole-metrics.yaml
# Copyright 2017 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: "flyte-kubernetes-dashboard-metrics"
  labels:
    app.kubernetes.io/name: kubernetes-dashboard
    helm.sh/chart: kubernetes-dashboard-4.0.2
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/version: "2.2.0"
    app.kubernetes.io/managed-by: Helm
rules:
  # Allow Metrics Scraper to get metrics from the Metrics server
  - apiGroups: ["metrics.k8s.io"]
    resources: ["pods", "nodes"]
    verbs: ["get", "list", "watch"]
---
# Source: flyte/charts/kubernetes-dashboard/templates/clusterrole-readonly.yaml
# Copyright 2017 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: "flyte-kubernetes-dashboard-readonly"
  labels:
    app.kubernetes.io/name: kubernetes-dashboard
    helm.sh/chart: kubernetes-dashboard-4.0.2
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/version: "2.2.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - persistentvolumeclaims
      - pods
      - replicationcontrollers
      - replicationcontrollers/scale
      - serviceaccounts
      - services
      - nodes
      - persistentvolumeclaims
      - persistentvolumes
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - bindings
      - events
      - limitranges
      - namespaces/status
      - pods/log
      - pods/status
      - replicationcontrollers/status
      - resourcequotas
      - resourcequotas/status
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - apps
    resources:
      - daemonsets
      - deployments
      - deployments/scale
      - replicasets
      - replicasets/scale
      - statefulsets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - autoscaling
    resources:
      - horizontalpodautoscalers
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - batch
    resources:
      - cronjobs
      - jobs
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - daemonsets
      - deployments
      - deployments/scale
      - ingresses
      - networkpolicies
      - replicasets
      - replicasets/scale
      - replicationcontrollers/scale
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - policy
    resources:
      - poddisruptionbudgets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - networkpolicies
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - storage.k8s.io
    resources:
      - storageclasses
      - volumeattachments
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - rbac.authorization.k8s.io
    resources:
      - clusterrolebindings
      - clusterroles
      - roles
      - rolebindings
    verbs:
      - get
      - list
      - watch
---
# Source: flyte/charts/contour/templates/contour/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: flyte-contour-contour
  labels:
    app.kubernetes.io/name: contour
    helm.sh/chart: contour-5.0.0
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: flyte-contour-contour
subjects:
  - kind: ServiceAccount
    name: flyte-contour-contour
    namespace: flyte
---
# Source: flyte/charts/flyte/templates/admin/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: flyteadmin-binding
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-v0.1.10
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: flyteadmin
subjects:
- kind: ServiceAccount
  name: flyteadmin
  namespace: flyte
---
# Source: flyte/charts/flyte/templates/propeller/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: flytepropeller
  labels: 
    app.kubernetes.io/name: flytepropeller
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-v0.1.10
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: flytepropeller
subjects:
- kind: ServiceAccount
  name: flytepropeller
  namespace: flyte
---
# Source: flyte/charts/flyte/templates/propeller/webhook.yaml
# Create a binding from Role -> ServiceAccount
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: flyte-pod-webhook
  namespace: flyte
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: flyte-pod-webhook
subjects:
  - kind: ServiceAccount
    name: flyte-pod-webhook
    namespace: flyte
---
# Source: flyte/charts/kubernetes-dashboard/templates/clusterrolebinding-metrics.yaml
# Copyright 2017 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: "flyte-kubernetes-dashboard-metrics"
  labels:
    app.kubernetes.io/name: kubernetes-dashboard
    helm.sh/chart: kubernetes-dashboard-4.0.2
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/version: "2.2.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: flyte-kubernetes-dashboard-metrics
subjects:
  - kind: ServiceAccount
    name: flyte-kubernetes-dashboard
    namespace: flyte
---
# Source: flyte/charts/kubernetes-dashboard/templates/clusterrolebinding-readonly.yaml
# Copyright 2017 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: flyte-kubernetes-dashboard-readonly
  labels:
    app.kubernetes.io/name: kubernetes-dashboard
    helm.sh/chart: kubernetes-dashboard-4.0.2
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/version: "2.2.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: flyte-kubernetes-dashboard-readonly
subjects:
  - kind: ServiceAccount
    name: flyte-kubernetes-dashboard
    namespace: flyte
---
# Source: flyte/charts/kubernetes-dashboard/templates/role.yaml
# Copyright 2017 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: flyte-kubernetes-dashboard
  labels:
    app.kubernetes.io/name: kubernetes-dashboard
    helm.sh/chart: kubernetes-dashboard-4.0.2
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/version: "2.2.0"
    app.kubernetes.io/managed-by: Helm
rules:
    # Allow Dashboard to get, update and delete Dashboard exclusive secrets.
  - apiGroups: [""]
    resources: ["secrets"]
    resourceNames: ["kubernetes-dashboard-key-holder", "kubernetes-dashboard-certs", "kubernetes-dashboard-csrf"]
    verbs: ["get", "update", "delete"]
    # Allow Dashboard to get and update 'kubernetes-dashboard-settings' config map.
  - apiGroups: [""]
    resources: ["configmaps"]
    resourceNames: ["kubernetes-dashboard-settings"]
    verbs: ["get", "update"]
    # Allow Dashboard to get metrics.
  - apiGroups: [""]
    resources: ["services"]
    resourceNames: ["heapster", "dashboard-metrics-scraper"]
    verbs: ["proxy"]
  - apiGroups: [""]
    resources: ["services/proxy"]
    resourceNames: ["heapster", "http:heapster:", "https:heapster:", "dashboard-metrics-scraper", "http:dashboard-metrics-scraper"]
    verbs: ["get"]
---
# Source: flyte/charts/sparkoperator/templates/spark-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: spark-role
  namespace: flyte
  labels:
    helm.sh/chart: sparkoperator-1.1.17
    app.kubernetes.io/name: sparkoperator
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/version: "v1beta2-1.3.3-3.1.1"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - "*"
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - "*"
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - "*"
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  verbs:
  - "*"
---
# Source: flyte/charts/kubernetes-dashboard/templates/rolebinding.yaml
# Copyright 2017 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: flyte-kubernetes-dashboard
  labels:
    app.kubernetes.io/name: kubernetes-dashboard
    helm.sh/chart: kubernetes-dashboard-4.0.2
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/version: "2.2.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: flyte-kubernetes-dashboard
subjects:
  - kind: ServiceAccount
    name: flyte-kubernetes-dashboard
    namespace: flyte
---
# Source: flyte/charts/sparkoperator/templates/spark-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: spark
  namespace: flyte
  labels:
    helm.sh/chart: sparkoperator-1.1.17
    app.kubernetes.io/name: sparkoperator
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/version: "v1beta2-1.3.3-3.1.1"
    app.kubernetes.io/managed-by: Helm
subjects:
- kind: ServiceAccount
  name: flyte-spark
  namespace: flyte
roleRef:
  kind: Role
  name: spark-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: flyte/charts/contour/templates/contour/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: flyte-contour
  namespace: flyte
  labels:
    app.kubernetes.io/name: contour
    helm.sh/chart: contour-5.0.0
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: contour
spec:
  ports:
    - port: 8001
      name: xds
      protocol: TCP
      targetPort: 8001
  selector:
    app.kubernetes.io/name: contour
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/component: contour
  type: ClusterIP
---
# Source: flyte/charts/contour/templates/envoy/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: flyte-contour-envoy
  namespace: flyte
  labels:
    app.kubernetes.io/name: contour
    helm.sh/chart: contour-5.0.0
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: envoy
  annotations:
    # This annotation puts the AWS ELB into "TCP" mode so that it does not
    # do HTTP negotiation for HTTPS connections at the ELB edge.
    # The downside of this is the remote IP address of all connections will
    # appear to be the internal address of the ELB. See docs/proxy-proto.md
    # for information about enabling the PROXY protocol on the ELB to recover
    # the original remote IP address.
    # We don't set this for nlb, per the contour docs.
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
spec:
  externalTrafficPolicy: "Local"
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
      nodePort: 30081
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
  selector:
    app.kubernetes.io/name: contour
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/component: envoy
  type: NodePort
---
# Source: flyte/charts/flyte/templates/admin/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: flyteadmin
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-v0.1.10
    app.kubernetes.io/managed-by: Helm
  annotations: 
    projectcontour.io/upstream-protocol.h2c: grpc
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 8088
    - name: grpc
      port: 81
      protocol: TCP
      targetPort: 8089
    - name: redoc
      protocol: TCP
      port: 87
      targetPort: 8087
    - name: http-metrics
      protocol: TCP
      port: 10254
  selector: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: flyte
---
# Source: flyte/charts/flyte/templates/console/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: flyteconsole
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flyteconsole
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-v0.1.10
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
  - port: 80
    protocol: TCP
    targetPort: 8080
  selector: 
    app.kubernetes.io/name: flyteconsole
    app.kubernetes.io/instance: flyte
---
# Source: flyte/charts/flyte/templates/datacatalog/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: datacatalog
  namespace: flyte
  labels: 
    app.kubernetes.io/name: datacatalog
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-v0.1.10
    app.kubernetes.io/managed-by: Helm
  annotations: 
    projectcontour.io/upstream-protocol.h2c: grpc
spec:
  type: NodePort
  ports:
  - name: grpc-2
    port: 8089
    protocol: TCP
    targetPort: 8089
  - name: http
    port: 88
    protocol: TCP
    targetPort: 8088
  - name: grpc
    port: 89
    protocol: TCP
    targetPort: 8089
  selector: 
    app.kubernetes.io/name: datacatalog
    app.kubernetes.io/instance: flyte
---
# Source: flyte/charts/flyte/templates/propeller/webhook.yaml
# Service
apiVersion: v1
kind: Service
metadata:
  name: flyte-pod-webhook
  namespace: flyte
  annotations: 
    projectcontour.io/upstream-protocol.h2c: grpc
spec:
  selector:
    app: flyte-pod-webhook
  ports:
    - name: https
      protocol: TCP
      port: 443
      targetPort: 9443
---
# Source: flyte/charts/kubernetes-dashboard/templates/service.yaml
# Copyright 2017 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: Service
metadata:
  name: flyte-kubernetes-dashboard
  labels:
    app.kubernetes.io/name: kubernetes-dashboard
    helm.sh/chart: kubernetes-dashboard-4.0.2
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/version: "2.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: kubernetes-dashboard
    kubernetes.io/cluster-service: "true"
spec:
  type: NodePort
  ports:
  - port: 30082
    targetPort: http
    name: http
    nodePort: 30082
  selector:
    app.kubernetes.io/name: kubernetes-dashboard
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/component: kubernetes-dashboard
---
# Source: flyte/templates/minio/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: minio
  namespace: flyte
  labels: 
    app.kubernetes.io/name: minio
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-v0.1.10
    app.kubernetes.io/managed-by: Helm
spec:
  type: NodePort
  ports:
  - name: minio
    nodePort: 30084
    port: 9000
    protocol: TCP
    targetPort: minio
  - name: minio-console
    nodePort: 30088
    port: 9001
    protocol: TCP
    targetPort: minio-console
  selector: 
    app.kubernetes.io/name: minio
    app.kubernetes.io/instance: flyte
---
# Source: flyte/templates/postgres/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: flyte
  labels: 
    app.kubernetes.io/name: postgres
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-v0.1.10
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
  - name: postgres
    port: 5432
    protocol: TCP
    targetPort: postgres
  selector: 
    app.kubernetes.io/name: postgres
    app.kubernetes.io/instance: flyte
---
# Source: flyte/charts/contour/templates/envoy/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: flyte-contour-envoy
  namespace: flyte
  labels:
    app.kubernetes.io/name: contour
    helm.sh/chart: contour-5.0.0
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: envoy
spec:
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 10%
  selector:
    matchLabels:
      app.kubernetes.io/name: contour
      app.kubernetes.io/instance: flyte
      app.kubernetes.io/component: envoy
  template:
    metadata:
      labels:
        app.kubernetes.io/name: contour
        helm.sh/chart: contour-5.0.0
        app.kubernetes.io/instance: flyte
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: envoy
    spec:
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          
        nodeAffinity:
          
      terminationGracePeriodSeconds: 300
      hostNetwork: false
      dnsPolicy: ClusterFirst
      containers:
        - command:
            - contour
          args:
            - envoy
            - shutdown-manager
          image: docker.io/bitnami/contour:1.17.0-debian-10-r0
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                  - contour
                  - envoy
                  - shutdown
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8090
            initialDelaySeconds: 120
            periodSeconds: 20
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          name: shutdown-manager
        - command:
            - envoy
          args:
            - -c
            - /config/envoy.json
            - --service-cluster $(CONTOUR_NAMESPACE)
            - --service-node $(ENVOY_POD_NAME)
            - --log-level info
          image: docker.io/bitnami/envoy:1.17.3-debian-10-r47
          imagePullPolicy: IfNotPresent
          name: envoy
          securityContext:
            runAsUser: 0
          env:
            - name: CONTOUR_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: ENVOY_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
          ports:
            - containerPort: 80
              hostPort: 80
              name: http
              protocol: TCP
            - containerPort: 443
              hostPort: 443
              name: https
              protocol: TCP
            - containerPort: 8002
              name: metrics
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /ready
              port: 8002
            initialDelaySeconds: 10
            periodSeconds: 3
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /ready
              port: 8002
            initialDelaySeconds: 120
            periodSeconds: 20
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          resources: 
            limits:
              cpu: 100m
              memory: 100Mi
            requests:
              cpu: 10m
              memory: 50Mi
          volumeMounts:
            - name: envoy-config
              mountPath: /config
            - name: envoycert
              mountPath: /certs
          lifecycle:
            preStop:
              httpGet:
                path: /shutdown
                port: 8090
                scheme: HTTP
      initContainers:
        - command:
            - contour
          args:
            - bootstrap
            - /config/envoy.json
            - --xds-address=flyte-contour
            - --xds-port=8001
            - --resources-dir=/config/resources
            - --envoy-cafile=/certs/ca.crt
            - --envoy-cert-file=/certs/tls.crt
            - --envoy-key-file=/certs/tls.key
          image: docker.io/bitnami/contour:1.17.0-debian-10-r0
          imagePullPolicy: IfNotPresent
          name: envoy-initconfig
          resources: 
            limits:
              cpu: 100m
              memory: 100Mi
            requests:
              cpu: 10m
              memory: 50Mi
          volumeMounts:
            - name: envoy-config
              mountPath: /config
            - name: envoycert
              mountPath: /certs
              readOnly: true
          env:
            - name: CONTOUR_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
      automountServiceAccountToken: false
      serviceAccountName: flyte-contour-envoy
      volumes:
        - name: envoy-config
          emptyDir: {}
        - name: envoycert
          secret:
            secretName: envoycert
      restartPolicy: Always
---
# Source: flyte/charts/contour/templates/contour/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flyte-contour-contour
  namespace: flyte
  labels:
    app.kubernetes.io/name: contour
    helm.sh/chart: contour-5.0.0
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: contour
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      # This value of maxSurge means that during a rolling update
      # the new ReplicaSet will be created first.
      maxSurge: 50%
  selector:
    matchLabels:
      app.kubernetes.io/name: contour
      app.kubernetes.io/instance: flyte
      app.kubernetes.io/component: contour
  template:
    metadata:
      annotations:
        checksum/config: 0f188bc9efceaf67fedcc75e30626b11bd4f70e2301534d820cb09a7db9f2140
      labels:
        app.kubernetes.io/name: contour
        helm.sh/chart: contour-5.0.0
        app.kubernetes.io/instance: flyte
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: contour
    spec:
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: contour
                    app.kubernetes.io/instance: flyte
                    app.kubernetes.io/component: contour
                namespaces:
                  - "flyte"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      containers:
        - command:
            - contour
          args:
            - serve
            - --incluster
            - --xds-address=0.0.0.0
            - --xds-port=8001
            - --envoy-service-http-port=80
            - --envoy-service-https-port=443
            - --contour-cafile=/certs/ca.crt
            - --contour-cert-file=/certs/tls.crt
            - --contour-key-file=/certs/tls.key
            - --config-path=/config/contour.yaml
          image: docker.io/bitnami/contour:1.17.0-debian-10-r0
          imagePullPolicy: IfNotPresent
          name: contour
          ports:
            - containerPort: 8001
              name: xds
              protocol: TCP
            - containerPort: 8000
              name: metrics
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8000
            initialDelaySeconds: 120
            periodSeconds: 20
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            tcpSocket:
              port: 8001
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          resources: 
            limits:
              cpu: 100m
              memory: 100Mi
            requests:
              cpu: 10m
              memory: 50Mi
          volumeMounts:
            - name: contourcert
              mountPath: /certs
              readOnly: true
            - name: contour-config
              mountPath: /config
              readOnly: true
          env:
            - name: CONTOUR_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
      dnsPolicy: ClusterFirst
      serviceAccountName: flyte-contour-contour
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 
        runAsNonRoot: true
      volumes:
        - name: contourcert
          secret:
            secretName: contourcert
        - name: contour-config
          configMap:
            name: flyte-contour
            defaultMode: 0644
            items:
              - key: contour.yaml
                path: contour.yaml
---
# Source: flyte/charts/flyte/templates/admin/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flyteadmin
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-v0.1.10
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: flyteadmin
      app.kubernetes.io/instance: flyte
  template:
    metadata:
      annotations:
        configChecksum: "4c2b21ffd7fbd7bb8eae5d29e9d06856f014cffde66a848e52dfe35668eb268"
      labels: 
        app.kubernetes.io/name: flyteadmin
        app.kubernetes.io/instance: flyte
        helm.sh/chart: flyte-v0.1.10
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext:
        fsGroup: 65534
        runAsUser: 1001
        fsGroupChangePolicy: "Always"
      initContainers:
        - name: check-db-ready
          image: ecr.flyte.org/ubuntu/postgres:13-21.04_beta
          securityContext:
             runAsUser: 0
          command:
          - sh
          - -c
          - until pg_isready -h postgres -p 5432; do echo waiting for database; sleep 2; done;
        - command:
          - flyteadmin
          - --config
          - /etc/flyte/config/*.yaml
          - migrate
          - run
          image: "cr.flyte.org/flyteorg/flyteadmin:v0.6.89"
          imagePullPolicy: "IfNotPresent"
          name: run-migrations
          volumeMounts:
          
          - mountPath: /etc/flyte/config
            name: config-volume
        - command:
          - flyteadmin
          - --config
          - /etc/flyte/config/*.yaml
          - migrate
          - seed-projects
          - flytesnacks
          - flytetester
          - flyteexamples
          image: "cr.flyte.org/flyteorg/flyteadmin:v0.6.89"
          imagePullPolicy: "IfNotPresent"
          name: seed-projects
          volumeMounts:
          
          - mountPath: /etc/flyte/config
            name: config-volume
        - command:
          - flyteadmin
          - --config
          - /etc/flyte/config/*.yaml
          - clusterresource
          - sync
          image: "cr.flyte.org/flyteorg/flyteadmin:v0.6.89"
          imagePullPolicy: "IfNotPresent"
          name: sync-cluster-resources
          volumeMounts:
          
          - mountPath: /etc/flyte/clusterresource/templates
            name: resource-templates
          - mountPath: /etc/flyte/config
            name: config-volume
        - name: generate-secrets
          image: "cr.flyte.org/flyteorg/flyteadmin:v0.6.89"
          imagePullPolicy: "IfNotPresent"
          command: ["/bin/sh", "-c"]
          args:
            [
                "flyteadmin --config=/etc/flyte/config/*.yaml secrets init --localPath /etc/scratch/secrets && flyteadmin --config=/etc/flyte/config/*.yaml secrets create --name flyte-admin-secrets --fromPath /etc/scratch/secrets",
            ]
          volumeMounts:
            - name: config-volume
              mountPath: /etc/flyte/config
            - name: scratch
              mountPath: /etc/scratch
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
      containers:
      - command:
        - flyteadmin
        - --config
        - /etc/flyte/config/*.yaml
        - serve
        image: "cr.flyte.org/flyteorg/flyteadmin:v0.6.89"
        imagePullPolicy: "IfNotPresent"
        name: flyteadmin
        ports:
        - containerPort: 8088
        - containerPort: 8089
        - containerPort: 10254
        resources: 
          limits:
            cpu: 250m
            ephemeral-storage: 500Mi
            memory: 500Mi
          requests:
            cpu: 10m
            ephemeral-storage: 50Mi
            memory: 50Mi
        volumeMounts:
        
        - mountPath: /srv/flyte
          name: shared-data
        - mountPath: /etc/flyte/config
          name: config-volume
        - name: auth
          mountPath: /etc/secrets/
      - command:
        - sh
        - -c
        - ln -s /usr/share/nginx/html /usr/share/nginx/html/openapi && sh /usr/local/bin/docker-run.sh
        env:
        - name: PAGE_TITLE
          value: Flyte Admin OpenAPI
        - name: SPEC_URL
          value: /api/v1/openapi
        - name: PORT
          value: "8087"
        image: docker.io/redocly/redoc
        imagePullPolicy: IfNotPresent
        name: redoc
        ports:
        - containerPort: 8087
        resources:
          limits:
            cpu: "0.1"
            memory: 200Mi
      serviceAccountName: flyteadmin
      volumes:
        
        - emptyDir: {}
          name: shared-data
        - emptyDir: {}
          name: scratch
        - configMap:
            name: flyte-admin-config
          name: config-volume
        - configMap:
            name: clusterresource-template
          name: resource-templates
        - name: auth
          secret:
            secretName: flyte-admin-secrets
---
# Source: flyte/charts/flyte/templates/console/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flyteconsole
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flyteconsole
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-v0.1.10
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: flyteconsole
      app.kubernetes.io/instance: flyte
  template:
    metadata:
      annotations:
        configChecksum: "31c9b63c5d5979ec6d9c6bf1d6deaa1128117c74a50ad417820d7896e7eb7fd"
      labels: 
        app.kubernetes.io/name: flyteconsole
        app.kubernetes.io/instance: flyte
        helm.sh/chart: flyte-v0.1.10
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext:
        runAsUser: 1000
        fsGroupChangePolicy: "OnRootMismatch"
      containers:
      - image: "cr.flyte.org/flyteorg/flyteconsole:v0.40.0"
        imagePullPolicy: "IfNotPresent"
        name: flyteconsole
        envFrom:
        - configMapRef:
            name: flyte-console-config
        ports:
        - containerPort: 8080
        env:
        - name: ENABLE_GA
          value: "true"
        - name: GA_TRACKING_ID
          value: "G-0QW4DJWJ20"
        resources: 
          limits:
            cpu: 500m
            memory: 250Mi
          requests:
            cpu: 10m
            memory: 50Mi
        volumeMounts:
        - mountPath: /srv/flyte
          name: shared-data
      volumes:
      - emptyDir: {}
        name: shared-data
---
# Source: flyte/charts/flyte/templates/datacatalog/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: datacatalog
  namespace: flyte
  labels: 
    app.kubernetes.io/name: datacatalog
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-v0.1.10
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: datacatalog
      app.kubernetes.io/instance: flyte
  template:
    metadata:
      annotations:
        configChecksum: "707654d78d9df94986f4943808c0b84027b01d91da9e41d312d68dfac950062"
      labels: 
        app.kubernetes.io/name: datacatalog
        app.kubernetes.io/instance: flyte
        helm.sh/chart: flyte-v0.1.10
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
        fsGroupChangePolicy: "OnRootMismatch"
      initContainers:
      - name: check-db-ready
        image: postgres:10.16-alpine
        securityContext:
          runAsUser: 0
        command:
          - sh
          - -c
          - until pg_isready -h postgres -p 5432; do echo waiting for database; sleep 2; done;
      - command:
        - datacatalog
        - --config
        - /etc/datacatalog/config/*.yaml
        - migrate
        - run
        image: "cr.flyte.org/flyteorg/datacatalog:v0.3.19"
        imagePullPolicy: "IfNotPresent"
        name: run-migrations
        volumeMounts:
        
        - mountPath: /etc/datacatalog/config
          name: config-volume
      containers:
      - command:
        - datacatalog
        - --config
        - /etc/datacatalog/config/*.yaml
        - serve
        image: "cr.flyte.org/flyteorg/datacatalog:v0.3.19"
        imagePullPolicy: "IfNotPresent"
        name: datacatalog
        ports:
        - containerPort: 8088
        - containerPort: 8089
        - containerPort: 10254
        resources: 
          limits:
            cpu: 500m
            ephemeral-storage: 100Mi
            memory: 500Mi
          requests:
            cpu: 10m
            ephemeral-storage: 50Mi
            memory: 50Mi
        volumeMounts:
        
        - mountPath: /etc/datacatalog/config
          name: config-volume
      serviceAccountName: datacatalog
      volumes:
      
      - emptyDir: {}
        name: shared-data
      - configMap:
          name: datacatalog-config
        name: config-volume
---
# Source: flyte/charts/flyte/templates/flytescheduler/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flytescheduler
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flytescheduler
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-v0.1.10
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: flytescheduler
      app.kubernetes.io/instance: flyte
  template:
    metadata:
      annotations:
        configChecksum: "4c2b21ffd7fbd7bb8eae5d29e9d06856f014cffde66a848e52dfe35668eb268"
      labels: 
        app.kubernetes.io/name: flytescheduler
        app.kubernetes.io/instance: flyte
        helm.sh/chart: flyte-v0.1.10
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext:
        fsGroup: 65534
        runAsUser: 1001
        fsGroupChangePolicy: "Always"
      initContainers:
      - command:
        - flytescheduler
        - precheck
        - --config
        - /etc/flyte/config/*.yaml
        image: "cr.flyte.org/flyteorg/flytescheduler:v0.6.89"
        imagePullPolicy: "IfNotPresent"
        name: flytescheduler-check
        volumeMounts:
          
          - mountPath: /etc/flyte/config
            name: config-volume
          - name: auth
            mountPath: /etc/secrets/
      containers:
      - command:
        - flytescheduler
        - run
        - --config
        - /etc/flyte/config/*.yaml
        image: "cr.flyte.org/flyteorg/flytescheduler:v0.6.89"
        imagePullPolicy: "IfNotPresent"
        name: flytescheduler
        ports:
          - containerPort: 10254
        resources: 
          limits:
            cpu: 250m
            ephemeral-storage: 100Mi
            memory: 500Mi
          requests:
            cpu: 10m
            ephemeral-storage: 50Mi
            memory: 50Mi
        volumeMounts:
          
          - mountPath: /etc/flyte/config
            name: config-volume
          - name: auth
            mountPath: /etc/secrets/
      serviceAccountName: flytescheduler
      volumes:
        
        - emptyDir: {}
          name: shared-data
        - configMap:
            name: flyte-scheduler-config
          name: config-volume
        - name: auth
          secret:
            secretName: flyte-secret-auth
---
# Source: flyte/charts/flyte/templates/propeller/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: flyte
  name: flytepropeller
  labels: 
    app.kubernetes.io/name: flytepropeller
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-v0.1.10
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: flytepropeller
      app.kubernetes.io/instance: flyte
  template:
    metadata:
      annotations:
        configChecksum: "31758cded1cfffe56860cca114cb7642a7a69782fb29eace73e1425aaff04da"
      labels: 
        app.kubernetes.io/name: flytepropeller
        app.kubernetes.io/instance: flyte
        helm.sh/chart: flyte-v0.1.10
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext:
        fsGroup: 65534
        runAsUser: 1001
        fsGroupChangePolicy: "Always"
      containers:
      - command:
        - flytepropeller
        - --config
        - /etc/flyte/config/*.yaml
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        image: "cr.flyte.org/flyteorg/flytepropeller:v0.16.14"
        imagePullPolicy: "IfNotPresent"
        name: flytepropeller
        ports:
        - containerPort: 10254
        resources: 
          limits:
            cpu: 200m
            ephemeral-storage: 100Mi
            memory: 200Mi
          requests:
            cpu: 10m
            ephemeral-storage: 50Mi
            memory: 50Mi
        volumeMounts:
          - name: config-volume
            mountPath: /etc/flyte/config
          - name: auth
            mountPath: /etc/secrets/
      serviceAccountName: flytepropeller
      volumes:
      - configMap:
          name: flyte-propeller-config
        name: config-volume
      - name: auth
        secret:
          secretName: flyte-secret-auth
---
# Source: flyte/charts/flyte/templates/propeller/webhook.yaml
# Create the actual deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flyte-pod-webhook
  namespace: flyte
  labels:
    app: flyte-pod-webhook
spec:
  selector:
    matchLabels:
      app: flyte-pod-webhook
  template:
    metadata:
      labels:
        app: flyte-pod-webhook
        app.kubernetes.io/name: flyte-pod-webhook
        app.kubernetes.io/version: v0.16.14
      annotations:
        configChecksum: "31758cded1cfffe56860cca114cb7642a7a69782fb29eace73e1425aaff04da"
    spec:
      securityContext:
        fsGroup: 65534
        runAsUser: 1001
        fsGroupChangePolicy: "Always"
      serviceAccountName: flyte-pod-webhook
      initContainers:
      - name: generate-secrets
        image: "cr.flyte.org/flyteorg/flytepropeller:v0.16.14"
        imagePullPolicy: "IfNotPresent"
        command:
          - flytepropeller
        args:
          - webhook
          - init-certs
          - --config
          - /etc/flyte/config/*.yaml
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        volumeMounts:
          - name: config-volume
            mountPath: /etc/flyte/config
      containers:
        - name: webhook
          image: "cr.flyte.org/flyteorg/flytepropeller:v0.16.14"
          imagePullPolicy: "IfNotPresent"
          command:
            - flytepropeller
          args:
            - webhook
            - --config
            - /etc/flyte/config/*.yaml
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          volumeMounts:
            - name: config-volume
              mountPath: /etc/flyte/config
              readOnly: true
            - name: webhook-certs
              mountPath: /etc/webhook/certs
              readOnly: true
      volumes:
        - name: config-volume
          configMap:
            name: flyte-propeller-config
        - name: webhook-certs
          secret:
            secretName: flyte-pod-webhook
---
# Source: flyte/charts/kubernetes-dashboard/templates/deployment.yaml
# Copyright 2017 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: flyte-kubernetes-dashboard
  labels:
    app.kubernetes.io/name: kubernetes-dashboard
    helm.sh/chart: kubernetes-dashboard-4.0.2
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/version: "2.2.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: kubernetes-dashboard
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: kubernetes-dashboard
      app.kubernetes.io/instance: flyte
      app.kubernetes.io/component: kubernetes-dashboard
  template:
    metadata:
      annotations:
        seccomp.security.alpha.kubernetes.io/pod: runtime/default
      labels:
        app.kubernetes.io/name: kubernetes-dashboard
        helm.sh/chart: kubernetes-dashboard-4.0.2
        app.kubernetes.io/instance: flyte
        app.kubernetes.io/version: "2.2.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: kubernetes-dashboard
    spec:
      serviceAccountName: flyte-kubernetes-dashboard
      containers:
      - name: kubernetes-dashboard
        image: "kubernetesui/dashboard:v2.2.0"
        imagePullPolicy: IfNotPresent
        args:
          - --namespace=flyte
          - --metrics-provider=none
          - --enable-skip-login
          - --enable-insecure-login
          - --disable-settings-authorizer
        ports:
        - name: http
          containerPort: 9090
          protocol: TCP
        volumeMounts:
        - name: kubernetes-dashboard-certs
          mountPath: /certs
          # Create on-disk volume to store exec logs
        - mountPath: /tmp
          name: tmp-volume
        livenessProbe:
          httpGet:
            scheme: HTTP
            path: /
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        resources:
          limits:
            cpu: 2
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 200Mi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsGroup: 2001
          runAsUser: 1001
      volumes:
      - name: kubernetes-dashboard-certs
        secret:
          secretName: flyte-kubernetes-dashboard-certs
      - name: tmp-volume
        emptyDir: {}
---
# Source: flyte/charts/sparkoperator/templates/deployment.yaml
# If the admission webhook is enabled, then a post-install step is required
# to generate and install the secret in the operator namespace.

# In the post-install hook, the token corresponding to the operator service account
# is used to authenticate with the Kubernetes API server to install the secret bundle.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: flyte-sparkoperator
  labels:
    helm.sh/chart: sparkoperator-1.1.17
    app.kubernetes.io/name: sparkoperator
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/version: "v1beta2-1.3.3-3.1.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sparkoperator
      app.kubernetes.io/instance: flyte
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "10254"
        prometheus.io/path: /metrics
      labels:
        app.kubernetes.io/name: sparkoperator
        app.kubernetes.io/instance: flyte
    spec:
      serviceAccountName: flyte-sparkoperator
      securityContext:
        {}
      containers:
      - name: sparkoperator
        image: gcr.io/spark-operator/spark-operator:v1beta2-1.2.0-3.0.0
        imagePullPolicy: IfNotPresent
        securityContext:
          {}
        ports:
          - name: "metrics"
            containerPort: 10254
        
        args:
        - -v=2
        - -logtostderr
        - -namespace=
        - -ingress-url-format=
        - -controller-threads=10
        - -resync-interval=30
        - -enable-batch-scheduler=false
        - -enable-metrics=true
        - -metrics-labels=app_type
        - -metrics-port=10254
        - -metrics-endpoint=/metrics
        - -metrics-prefix=
        - -enable-resource-quota-enforcement=false
        resources:
          limits:
            cpu: 100m
            memory: 300Mi
          requests:
            cpu: 100m
            memory: 300Mi
---
# Source: flyte/templates/minio/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: flyte
  labels: 
    app.kubernetes.io/name: minio
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-v0.1.10
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: minio
      app.kubernetes.io/instance: flyte
  template:
    metadata:
      labels: 
        app.kubernetes.io/name: minio
        app.kubernetes.io/instance: flyte
        helm.sh/chart: flyte-v0.1.10
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
      - image: "ecr.flyte.org/bitnami/minio:2021.10.13-debian-10-r0"
        imagePullPolicy: "IfNotPresent"
        name: minio
        env:
          - name: MINIO_ACCESS_KEY
            value: minio
          - name: MINIO_SECRET_KEY
            value: miniostorage
          - name: MINIO_DEFAULT_BUCKETS
            value: my-s3-bucket
        ports:
        - containerPort: 9000
          name: minio
        - containerPort: 9001
          name: minio-console
        resources: 
          limits:
            cpu: 200m
            memory: 512Mi
          requests:
            cpu: 10m
            memory: 128Mi
        volumeMounts:
        - name: minio-storage
          mountPath: /data
      volumes:
      - name: minio-storage
        emptyDir: {}
---
# Source: flyte/templates/postgres/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: flyte
  labels: 
    app.kubernetes.io/name: postgres
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-v0.1.10
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: postgres
      app.kubernetes.io/instance: flyte
  template:
    metadata:
      labels: 
        app.kubernetes.io/name: postgres
        app.kubernetes.io/instance: flyte
        helm.sh/chart: flyte-v0.1.10
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
      - image: "ecr.flyte.org/ubuntu/postgres:13-21.04_beta"
        imagePullPolicy: "IfNotPresent"
        name: postgres
        env:
        - name: POSTGRES_HOST_AUTH_METHOD
          value: trust
        - name: POSTGRES_DB
          value: flyteadmin
        ports:
        - containerPort: 5432
          name: postgres
        resources: 
          limits:
            cpu: 1000m
            memory: 512Mi
          requests:
            cpu: 10m
            memory: 128Mi
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-storage
          emptyDir: {}
---
# Source: flyte/charts/flyte/templates/clusterresourcesync/cronjob.yaml
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: syncresources
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-v0.1.10
    app.kubernetes.io/managed-by: Helm
spec:
  schedule: '*/1 * * * *'
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - command:
            - flyteadmin
            - --config
            - /etc/flyte/config/*.yaml
            - clusterresource
            - sync
            image: "cr.flyte.org/flyteorg/flyteadmin:v0.6.89"
            imagePullPolicy: "IfNotPresent"
            name: sync-cluster-resources
            volumeMounts:
            
            - mountPath: /etc/flyte/clusterresource/templates
              name: resource-templates
            - mountPath: /etc/flyte/config
              name: config-volume
          restartPolicy: OnFailure
          serviceAccountName: flyteadmin
          volumes:
          
          - configMap:
              name: clusterresource-template
            name: resource-templates
          - configMap:
              name: flyte-clusterresourcesync-config
            name: config-volume
---
# Source: flyte/charts/flyte/templates/common/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: flyte
  namespace: flyte
  annotations: 
    nginx.ingress.kubernetes.io/app-root: /console
spec:
  rules:
    - http:
        paths:
          # This is useful only for frontend development
          - path: /__webpack_hmr
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteconsole
                port:
                  number: 80
          # Port 87 in FlyteAdmin maps to the redoc container.
          - path: /openapi
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 87
          # NOTE: If you change this, you must update the BASE_URL value in flyteconsole.yaml
          - path: /console
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteconsole
                port:
                  number: 80
          - path: /console/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteconsole
                port:
                  number: 80
          - path: /api
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /api/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /healthcheck
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /v1/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          # Port 87 in FlyteAdmin maps to the redoc container.
          - path: /openapi/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 87
          - path: /.well-known
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /.well-known/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /login
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /login/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /logout
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /logout/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /callback
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /callback/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /me
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /config
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /config/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /oauth2
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /oauth2/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          # NOTE: Port 81 in flyteadmin is the GRPC server port for FlyteAdmin.
          - path: /flyteidl.service.AdminService
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /flyteidl.service.AdminService/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /flyteidl.service.AuthMetadataService
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /flyteidl.service.AuthMetadataService/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /flyteidl.service.IdentityService
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /flyteidl.service.IdentityService/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /grpc.health.v1.Health
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /grpc.health.v1.Health/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
      host: ""
---
# Source: flyte/charts/kubernetes-dashboard/templates/ingress.yaml
# Copyright 2017 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: flyte/charts/kubernetes-dashboard/templates/networkpolicy.yaml
# Copyright 2017 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: flyte/charts/kubernetes-dashboard/templates/pdb.yaml
# Copyright 2017 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: flyte/charts/kubernetes-dashboard/templates/psp.yaml
# Copyright 2017 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: flyte/charts/contour/templates/certgen/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flyte-contour-contour-certgen
  namespace: flyte
  annotations:
    "helm.sh/hook": "pre-install,pre-upgrade"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app.kubernetes.io/name: contour
    helm.sh/chart: contour-5.0.0
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: contour-certgen
---
# Source: flyte/charts/sparkoperator/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flyte-sparkoperator
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-delete-policy": hook-failed, before-hook-creation
  labels:
    helm.sh/chart: sparkoperator-1.1.17
    app.kubernetes.io/name: sparkoperator
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/version: "v1beta2-1.3.3-3.1.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: flyte/charts/sparkoperator/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: flyte-sparkoperator
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-delete-policy": hook-failed, before-hook-creation
  labels:
    helm.sh/chart: sparkoperator-1.1.17
    app.kubernetes.io/name: sparkoperator
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/version: "v1beta2-1.3.3-3.1.1"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - "*"
- apiGroups:
  - ""
  resources:
  - services
  - configmaps
  - secrets
  verbs:
  - create
  - get
  - delete
  - update
- apiGroups:
  - extensions
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - create
  - get
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - resourcequotas
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - update
  - delete
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - mutatingwebhookconfigurations
  - validatingwebhookconfigurations
  verbs:
  - create
  - get
  - update
  - delete
- apiGroups:
  - sparkoperator.k8s.io
  resources:
  - sparkapplications
  - sparkapplications/status
  - scheduledsparkapplications
  - scheduledsparkapplications/status
  verbs:
  - "*"
---
# Source: flyte/charts/sparkoperator/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: flyte-sparkoperator
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-delete-policy": hook-failed, before-hook-creation
  labels:
    helm.sh/chart: sparkoperator-1.1.17
    app.kubernetes.io/name: sparkoperator
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/version: "v1beta2-1.3.3-3.1.1"
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: flyte-sparkoperator
    namespace: flyte
roleRef:
  kind: ClusterRole
  name: flyte-sparkoperator
  apiGroup: rbac.authorization.k8s.io
---
# Source: flyte/charts/contour/templates/certgen/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: flyte-contour-contour-certgen
  namespace: flyte
  annotations:
    "helm.sh/hook": "pre-install,pre-upgrade"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app.kubernetes.io/name: contour
    helm.sh/chart: contour-5.0.0
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: contour-certgen
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - create
      - update
---
# Source: flyte/charts/contour/templates/certgen/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: flyte-contour-contour-certgen
  namespace: flyte
  annotations:
    "helm.sh/hook": "pre-install,pre-upgrade"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app.kubernetes.io/name: contour
    helm.sh/chart: contour-5.0.0
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: contour-certgen
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: flyte-contour-contour-certgen
subjects:
  - kind: ServiceAccount
    name: flyte-contour-contour-certgen
---
# Source: flyte/charts/contour/templates/certgen/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: flyte-contour-contour-certgen
  namespace: flyte
  annotations:
    "helm.sh/hook": "pre-install,pre-upgrade"
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app.kubernetes.io/name: contour
    helm.sh/chart: contour-5.0.0
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: contour-certgen
spec:
  ttlSecondsAfterFinished: 0
  template:
    metadata:
      labels:
        app.kubernetes.io/name: contour
        helm.sh/chart: contour-5.0.0
        app.kubernetes.io/instance: flyte
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: contour-certgen
    spec:
      
      containers:
        - name: contour
          image: docker.io/bitnami/contour:1.17.0-debian-10-r0
          imagePullPolicy: IfNotPresent
          command:
            - contour
          args:
            - certgen
            - --kube
            - --incluster
            - --overwrite
            - --secrets-format=compact
            - --namespace=$(CONTOUR_NAMESPACE)
          env:
            - name: CONTOUR_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          resources: 
            limits:
              cpu: 100m
              memory: 100Mi
            requests:
              cpu: 10m
              memory: 50Mi
      restartPolicy: Never
      serviceAccountName: flyte-contour-contour-certgen
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 
        runAsNonRoot: true
  parallelism: 1
  completions: 1
  backoffLimit: 1
